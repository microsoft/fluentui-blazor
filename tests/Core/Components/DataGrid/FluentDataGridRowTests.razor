@using Xunit
@using static Microsoft.FluentUI.AspNetCore.Components.Tests.Components.DataGrid.SelectColumnTests
@inherits Bunit.TestContext

@code {

    private readonly IQueryable<Person> People = new[]
    {
        new Person(1, "Jean Martin", new DateOnly(1985, 3, 16)),
        new Person(2, "Kenji Sato", new DateOnly(2004, 1, 9)),
        new Person(3, "Julie Smith", new DateOnly(1958, 10, 10)),
    }.AsQueryable();

    public FluentDataGridRowTests()
    {
        JSInterop.Mode = JSRuntimeMode.Loose;

        // Register services
        Services.AddFluentUIComponents();
        Services.AddScoped<IKeyCodeService>(factory => new KeyCodeService());
    }

    [Fact]
    public void FluentDataGridRow_Default()
    {
        // Arrange
        var grid = Render<FluentDataGrid<object>>(
            @<FluentDataGrid TGridItem="object" GenerateHeader="DataGridGeneratedHeaderType.None">
                <FluentDataGridRow>
                    <FluentDataGridCell />
                </FluentDataGridRow>
            </FluentDataGrid>);

        // Act
        var row = grid.FindComponent<FluentDataGridRow<object>>();

        // Assert
        Assert.NotNull(grid);
        Assert.NotNull(row);
        Assert.Equal(DataGridRowType.Default, row.Instance.RowType);
        Assert.NotNull(row.Instance.ChildContent);
    }


    [Fact]
    public void FluentDataGridRow_TestNativeHandlers()
    {
        // Arrange
        var grid = Render<FluentDataGrid<object>>(
            @<FluentDataGrid TGridItem="object" GenerateHeader="DataGridGeneratedHeaderType.None">
            <FluentDataGridRow>
                <FluentDataGridCell />
            </FluentDataGridRow>
        </FluentDataGrid>
    );

        // Act
        var row = grid.FindComponent<FluentDataGridRow<object>>();

        // Assert
        Assert.NotNull(grid);
        Assert.NotNull(row);
        Assert.Equal(DataGridRowType.Default, row.Instance.RowType);
        row.Find("tr").Click();
        row.Find("tr").DoubleClick();
        row.Find("tr").KeyDown(new KeyboardEventArgs { Code = "Enter" });
        Assert.NotNull(row.Instance.ChildContent);
    }

    [Fact]
    public async Task FluentDataGridRow_HandleOnRowClickAsync_InvokesCallbacks()
    {
        // Arrange
        var rowClickInvoked = false;
        var cut = Render<FluentDataGrid<object>>(
            @<FluentDataGrid TGridItem="object" OnRowClick="@(e => rowClickInvoked = true)">
                <FluentDataGridRow>
                    <FluentDataGridCell />
                </FluentDataGridRow>
            </FluentDataGrid>
    );
        // Act
        var row = cut.FindComponent<FluentDataGridRow<object>>();
        await row.Instance.HandleOnRowClickAsync(row.Instance.RowId);

        // Assert
        Assert.True(rowClickInvoked);
    }

    [Fact]
    public async Task FluentDataGridRow_HandleOnRowClickAsync_EmptyRow()
    {
        // Arrange
        var rowClickInvoked = false;
        var People = new List<Person>() { }.AsQueryable();

        var cut = Render<FluentDataGrid<Person>>(
            @<FluentDataGrid TGridItem="Person" Items="People" OnRowClick="@(e => rowClickInvoked = true)" GenerateHeader="DataGridGeneratedHeaderType.None">
                <ChildContent>
                    <PropertyColumn Property="@(x => x.Name)" />
                </ChildContent>
                <EmptyContent>No Data</EmptyContent>
            </FluentDataGrid>);

        // Act
        var row = cut.FindComponent<FluentDataGridRow<Person>>();
        await row.Instance.HandleOnRowClickAsync(row.Instance.RowId);

        // Assert
        Assert.False(rowClickInvoked);
    }

    [Fact]
    public async Task FluentDataGridRow_HandleOnRowClickAsync_Class()
    {
        // Arrange
        
        var rowClickInvoked = false; 

        var cut = Render<FluentDataGrid<Person>>(
            @<FluentDataGrid TGridItem="Person" Items="People" OnRowClick="@(e => rowClickInvoked = true)" RowClass="@(x => x.PersonId > 0 ? "test" : "")" GenerateHeader="DataGridGeneratedHeaderType.None">
                <PropertyColumn Property="@(x => x.Name)" />
        </FluentDataGrid>);

        // Act
        var row = cut.FindComponent<FluentDataGridRow<Person>>();
        await row.Instance.HandleOnRowClickAsync(row.Instance.RowId);

        // Assert
        Assert.True(rowClickInvoked);
    }

    [Fact]
    public async Task FluentDataGridRow_HandleOnRowClickAsync_NoRowPassedIn()
    {
        // Arrange
        var rowClickInvoked = false;
        var cut = Render<FluentDataGrid<object>>(
            @<FluentDataGrid TGridItem="object" OnRowClick="@(e => rowClickInvoked = true)">
                <FluentDataGridRow>
                    <FluentDataGridCell />
                </FluentDataGridRow>
            </FluentDataGrid>);
        // Act
        var row = cut.FindComponent<FluentDataGridRow<object>>();
        await row.Instance.HandleOnRowClickAsync(string.Empty);

        // Assert
        Assert.False(rowClickInvoked);
    }

    [Fact]
    public async Task FluentDataGridRow_HandleOnRowDoubleClickAsync()
    {
        // Arrange
        var People = new List<Person>() { }.AsQueryable();
        var rowDoubleClickInvoked = false;

        var cut = Render<FluentDataGrid<Person>>(
            @<FluentDataGrid TGridItem="Person" Items="People" OnRowDoubleClick="@(e => rowDoubleClickInvoked = true)" GenerateHeader="DataGridGeneratedHeaderType.None">
            <ChildContent>
                <PropertyColumn Property="@(x => x.Name)" />
            </ChildContent>
            <EmptyContent>No Data</EmptyContent>
        </FluentDataGrid>);

        // Act
        var row = cut.FindComponent<FluentDataGridRow<Person>>();
        await row.Instance.HandleOnRowDoubleClickAsync(row.Instance.RowId);

        // Assert
        Assert.True(rowDoubleClickInvoked);
    }

    [Fact]
    public async Task FluentDataGridRow_HandleOnRowDoubleClickAsync_EmptyRow()
    {
        // Arrange
        var People = new List<Person>() { }.AsQueryable();
        var rowDoubleClickInvoked = false;

        var cut = Render<FluentDataGrid<Person>>(
            @<FluentDataGrid TGridItem="Person" Items="People" OnRowDoubleClick="@(e => rowDoubleClickInvoked = true)" GenerateHeader="DataGridGeneratedHeaderType.None">
            <ChildContent>
                <PropertyColumn Property="@(x => x.Name)" />
            </ChildContent>
            <EmptyContent>No Data</EmptyContent>
        </FluentDataGrid>);

        // Act
        var row = cut.FindComponent<FluentDataGridRow<Person>>();
        await row.Instance.HandleOnRowClickAsync(row.Instance.RowId);

        // Assert
        Assert.False(rowDoubleClickInvoked);
    }

    [Fact]
    public async Task FluentDataGridRow_HandleOnRowDoubleClickAsync_NoRowPassedIn()
    {
        // Arrange
        var rowDoubleClickInvoked = false;
        var cut = Render<FluentDataGrid<object>>(
            @<FluentDataGrid TGridItem="object" OnRowDoubleClick="@(e => rowDoubleClickInvoked = true)">
            <FluentDataGridRow>
                <FluentDataGridCell />
            </FluentDataGridRow>
        </FluentDataGrid>);
        // Act
        var row = cut.FindComponent<FluentDataGridRow<object>>();
        await row.Instance.HandleOnRowDoubleClickAsync(string.Empty);

        // Assert
        Assert.False(rowDoubleClickInvoked);
    }

    [Fact]
    public async Task FluentDataGridRow_HandleOnRowFocusAsync()
    {
        // Arrange
        var rowFocusInvoked = false;
        var cut = Render<FluentDataGrid<object>>(
            @<FluentDataGrid TGridItem="object" OnRowFocus="@(e => rowFocusInvoked = true)">
                <FluentDataGridRow>
                    <FluentDataGridCell />
                </FluentDataGridRow>
            </FluentDataGrid>);

        // Act
        var cell = cut.FindComponent<FluentDataGridRow<object>>();
        await cell.Instance.HandleOnRowFocusAsync();
        // Assert
        Assert.True(rowFocusInvoked);
    }

    [Fact]
    public async Task FluentDataGridRow_HandleOnRowKeyDownAsync_HandlesKeyEnter()
    {
        // Arrange
        var items = new List<Person>(People).AsQueryable();
        var rowKeyDownInvoked = false;

        var cut = Render<FluentDataGrid<Person>>(
            @<FluentDataGrid TGridItem="Person" Items="@People" GenerateHeader="DataGridGeneratedHeaderType.None">
            <SelectColumn TGridItem="Person"
                          SelectMode="DataGridSelectMode.Multiple"
                          Selectable="@(x => x.PersonId > 0)"
                          SelectFromEntireRow="true"
                          OnSelect="@(e => rowKeyDownInvoked = true)" />
                <PropertyColumn Property="@(x => x)" Title="Value" />
            </FluentDataGrid>);

        // Act
        var keyboardEvent = new KeyboardEventArgs { Code = "Enter" };
        var row = cut.FindComponent<FluentDataGridRow<Person>>();
        await row.Instance.HandleOnRowKeyDownAsync(row.Instance.RowId, keyboardEvent);

        // Assert
        Assert.True(rowKeyDownInvoked);
    }


    [Fact]
    public async Task FluentDataGridRow_HandleOnRowKeyDownAsync_HandlesKeyOther()
    {
        // Arrange
        var items = new List<Person>(People).AsQueryable();
        var rowKeyDownInvoked = false;

        var cut = Render<FluentDataGrid<Person>>(
            @<FluentDataGrid TGridItem="Person" Items="@People" GenerateHeader="DataGridGeneratedHeaderType.None">
            <SelectColumn TGridItem="Person"
                          SelectMode="DataGridSelectMode.Multiple"
                          Selectable="@(x => x.PersonId > 1)"
                          SelectFromEntireRow="true"
                          OnSelect="@(e => rowKeyDownInvoked = true)" />
            <PropertyColumn Property="@(x => x)" Title="Value" />
        </FluentDataGrid>);

        // Act
        var keyboardEvent = new KeyboardEventArgs { Code = "A" };
        var row = cut.FindComponent<FluentDataGridRow<Person>>();
        await row.Instance.HandleOnRowKeyDownAsync(row.Instance.RowId, keyboardEvent);

        // Assert
        Assert.False(rowKeyDownInvoked);
    }

    [Fact]
    public async Task FluentDataGridRow_HandleOnRowKeyDownAsync_WithoutSelectColumn()
    {
        // Arrange
        var items = new List<Person>(People).AsQueryable();
        var rowKeyDownInvoked = false;

        var cut = Render<FluentDataGrid<Person>>(
            @<FluentDataGrid TGridItem="Person" Items="@People" GenerateHeader="DataGridGeneratedHeaderType.None" >
                <PropertyColumn Property="@(x => x)" Title="Value" />
            </FluentDataGrid>);

        // Act
        var keyboardEvent = new KeyboardEventArgs { Code = "Enter" };
        var row = cut.FindComponent<FluentDataGridRow<Person>>();
        await row.Instance.HandleOnRowKeyDownAsync(row.Instance.RowId, keyboardEvent);

        // Assert
        Assert.False(rowKeyDownInvoked);
    }

    [Fact]
    public async Task FluentDataGridRow_HandleOnRowKeyDownAsync_WithoutSelectColumn_NoDelegate()
    {
        // Arrange
        var items = new List<Person>(People).AsQueryable();
        var rowKeyDownInvoked = false;

        var cut = Render<FluentDataGrid<Person>>(
            @<FluentDataGrid TGridItem="Person" Items="@People" GenerateHeader="DataGridGeneratedHeaderType.None">
                <PropertyColumn Property="@(x => x)" Title="Value" />
            </FluentDataGrid>);

        // Act
        var keyboardEvent = new KeyboardEventArgs { Code = "Enter" };
        var row = cut.FindComponent<FluentDataGridRow<Person>>();
        await row.Instance.HandleOnRowKeyDownAsync(row.Instance.RowId, keyboardEvent);

        // Assert
        Assert.False(rowKeyDownInvoked);
    }

    [Fact]
    public async Task FluentDataGridRow_HandleOnRowKeyDownAsync_WithoutSelectColumn_WithHeader()
    {
        // Arrange
        var items = new List<Person>(People).AsQueryable();
        var rowKeyDownInvoked = false;

        var cut = Render<FluentDataGrid<Person>>(
            @<FluentDataGrid TGridItem="Person" Items="@People" GenerateHeader="DataGridGeneratedHeaderType.Default">
                <PropertyColumn Property="@(x => x)" Title="Value" />
            </FluentDataGrid>);

        // Act
        var keyboardEvent = new KeyboardEventArgs { Code = "Enter" };
        var row = cut.FindComponent<FluentDataGridRow<Person>>();
        await row.Instance.HandleOnRowKeyDownAsync(row.Instance.RowId, keyboardEvent);

        // Assert
        Assert.False(rowKeyDownInvoked);
    }

    [Fact]
    public async Task FluentDataGridRow_HandleOnRowKeyDownAsync_NoRowPassedIn()
    {
        // Arrange
        var items = new List<Person>(People).AsQueryable();
        var rowKeyDownInvoked = false;

        var cut = Render<FluentDataGrid<Person>>(
            @<FluentDataGrid TGridItem="Person" Items="@People" GenerateHeader="DataGridGeneratedHeaderType.Default">
            <PropertyColumn Property="@(x => x)" Title="Value" />
        </FluentDataGrid>);

        // Act
        var keyboardEvent = new KeyboardEventArgs { Code = "Enter" };
        var row = cut.FindComponent<FluentDataGridRow<Person>>();
        await row.Instance.HandleOnRowKeyDownAsync(string.Empty, keyboardEvent);

        // Assert
        Assert.False(rowKeyDownInvoked);
    }
}
