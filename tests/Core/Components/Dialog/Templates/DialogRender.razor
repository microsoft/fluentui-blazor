@implements IDisposable
<FluentDialogBody>
    Hello @Name
</FluentDialogBody>

@code {

    private System.Threading.Timer? _timer;

    [CascadingParameter]
    public required IDialogInstance Dialog { get; set; }

    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public DialogRenderOptions Options { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(10);
        Options.OnInitializedCount++;
    }

    protected override async Task OnParametersSetAsync()
    {
        await Task.Delay(10);
        Options.OnParametersSetCount++;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Options.AutoClose && Options.AutoCloseDelay > 0)
            {
                _timer = new System.Threading.Timer(async _ =>
                {
                    await Dialog.CloseAsync(Options.AutoCloseResult);
                }, null, Options.AutoCloseDelay, 5000);
            }

            return;
        }

        if (Options.AutoClose && Options.AutoCloseDelay <= 0)
        {
            await Task.Delay(10);
            await Dialog.CloseAsync(Options.AutoCloseResult);
        }
    }

    public void Dispose()
    {
        if (_timer is not null)
        {
            _timer.Dispose();
        }
    }
}
