@using Xunit;
@inherits TestContext
@code
{
    // A timeout can be set when you open a dialog box and do not close it.
    private const int TEST_TIMEOUT = 3000;

    public FluentMessageBoxTests()
    {
        JSInterop.Mode = JSRuntimeMode.Loose;
        Services.AddFluentUIComponents();

        DialogService = Services.GetRequiredService<IDialogService>();
        DialogProvider = RenderComponent<FluentDialogProvider>();
    }

    /// <summary>
    /// Gets the dialog service.
    /// </summary>
    public IDialogService DialogService { get; }

    /// <summary>
    /// Gets the dialog provider.
    /// </summary>
    public IRenderedComponent<FluentDialogProvider> DialogProvider { get; }

    [Fact(Timeout = TEST_TIMEOUT)]
    public async Task FluentMessageBox_Success()
    {
        // Act
        var dialogTask = DialogService.ShowSuccessAsync("My message");

        // Don't wait for the dialog to be closed
        await Task.CompletedTask;

        // Assert
        DialogProvider.Verify();
    }

    [Fact(Timeout = TEST_TIMEOUT)]
    public async Task FluentMessageBox_SuccessCustomized()
    {
        // Act
        var dialogTask = DialogService.ShowSuccessAsync("My message", "My title", "OK");

        // Don't wait for the dialog to be closed
        await Task.CompletedTask;

        // Assert
        DialogProvider.Verify();
    }

    [Fact(Timeout = TEST_TIMEOUT)]
    public async Task FluentMessageBox_Info()
    {
        // Act
        var dialogTask = DialogService.ShowInfoAsync("My message");

        // Don't wait for the dialog to be closed
        await Task.CompletedTask;

        // Assert
        DialogProvider.Verify();
    }

    [Fact(Timeout = TEST_TIMEOUT)]
    public async Task FluentMessageBox_InfoCustomized()
    {
        // Act
        var dialogTask = DialogService.ShowInfoAsync("My message", "My title", "OK");

        // Don't wait for the dialog to be closed
        await Task.CompletedTask;

        // Assert
        DialogProvider.Verify();
    }

    [Fact(Timeout = TEST_TIMEOUT)]
    public async Task FluentMessageBox_Warning()
    {
        // Act
        var dialogTask = DialogService.ShowWarningAsync("My message");

        // Don't wait for the dialog to be closed
        await Task.CompletedTask;

        // Assert
        DialogProvider.Verify();
    }

    [Fact(Timeout = TEST_TIMEOUT)]
    public async Task FluentMessageBox_WarningCustomized()
    {
        // Act
        var dialogTask = DialogService.ShowWarningAsync("My message", "My title", "OK");

        // Don't wait for the dialog to be closed
        await Task.CompletedTask;

        // Assert
        DialogProvider.Verify();
    }

    [Fact(Timeout = TEST_TIMEOUT)]
    public async Task FluentMessageBox_Error()
    {
        // Act
        var dialogTask = DialogService.ShowErrorAsync("My message");

        // Don't wait for the dialog to be closed
        await Task.CompletedTask;

        // Assert
        DialogProvider.Verify();
    }

    [Fact(Timeout = TEST_TIMEOUT)]
    public async Task FluentMessageBox_ErrorCustomized()
    {
        // Act
        var dialogTask = DialogService.ShowErrorAsync("My message", "My title", "OK");

        // Don't wait for the dialog to be closed
        await Task.CompletedTask;

        // Assert
        DialogProvider.Verify();
    }

    [Fact(Timeout = TEST_TIMEOUT)]
    public async Task FluentMessageBox_Confirmation()
    {
        // Act
        var dialogTask = DialogService.ShowConfirmationAsync("My message");

        // Don't wait for the dialog to be closed
        await Task.CompletedTask;

        // Assert
        DialogProvider.Verify();
    }

    [Fact(Timeout = TEST_TIMEOUT)]
    public async Task FluentMessageBox_ConfirmationCustomized()
    {
        // Act
        var dialogTask = DialogService.ShowConfirmationAsync("My message", "My title", "Yes", "No");

        // Don't wait for the dialog to be closed
        await Task.CompletedTask;

        // Assert
        DialogProvider.Verify();
    }

    [Fact(Timeout = TEST_TIMEOUT)]
    public async Task FluentMessageBox_EmptyOptions()
    {
        // Act
        var dialogTask = DialogService.ShowMessageBoxAsync(new());

        // Don't wait for the dialog to be closed
        await Task.CompletedTask;

        // Assert
        DialogProvider.Verify();
    }
}
