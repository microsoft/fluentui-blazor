@using Microsoft.FluentUI.AspNetCore.Components.Utilities
@using Xunit;
@using Microsoft.FluentUI.AspNetCore.Components.Tests.Samples;
@inherits TestContext
@typeparam TValue
@code
{
	public FluentSliderTests()
	{
		JSInterop.Mode = JSRuntimeMode.Loose;
		Services.AddFluentUIComponents();
	}

	[Fact]
	public void FluentSlider_Default()
	{
		// Arrange && Act
		var cut = Render(@<FluentSlider Max="10">fluent-Slider</FluentSlider>);

		// Assert
		cut.Verify();
	}

	[Fact]
	public void FluentSlider_Min()
	{
		// Arrange && Act
		var cut = Render(@<FluentSlider Min="2" Max="10" />);

		// Assert
		cut.Verify();
	}

	[Theory]
	[InlineData(SliderSize.Medium)]
	[InlineData(SliderSize.Small)]
	[InlineData((SliderSize)999)]
	public void FluentSlider_Size(SliderSize sliderSize)
	{
		// Arrange && Act
		using var cut = Render(@<FluentSlider Max="10" Size="@sliderSize" />);

		// Assert
		cut.Verify(suffix: sliderSize.ToString());
	}

	[Theory]
	[InlineData(true)]
	[InlineData(false)]
	public void FluentSlider_DisabledAttribute(bool disabled)
	{
		// Arrange && Act
		var cut = Render(@<FluentSlider Max="10" Disabled="@disabled" />);

		// Assert
		var actual = cut.Find("fluent-slider").HasAttribute("disabled");
		Assert.Equal(disabled, actual);
	}

	[Theory]
	[InlineData((byte)42, (byte)100)]
	[InlineData((int)42, (int)100)]
	[InlineData((long)42, (long)100)]
	[InlineData((float)42.0, (float)100)]
	[InlineData((double)42.0, (double)100)]
	public void FluentSlider_TypeOfValue<T>(T value, T max)
	{
		// Arrange
		var cut = Render(@<FluentSlider Max="@max" @bind-Value="@value" />);
		var valueAttribute = cut.Find("fluent-slider").GetAttribute("value");

		// Assert
		Assert.Equal(value?.ToString(), valueAttribute);
	}

    [Fact]
    public void FluentSlider_Value_String()
    {
		// Arrange && Act
		string value = "42";
		string max = "42";
		var cut = Render(@<FluentSlider Max="@max" @bind-Value="@value" />);

		// Assert
		cut.FindComponent<FluentSlider<TValue>>().Instance.ValidateFormatValueAsString((TValue)Convert.ChangeType(value, typeof(TValue)));
	}

	[Fact]
	public void FluentSlider_Value_Decimal()
	{
		// Arrange && Act
		decimal value = decimal.MaxValue;
		var cut = Render(@<FluentSlider Max="10" @bind-Value="@value" />);

		// Assert
		cut.Verify();
	}

	[Fact]
	public void FluentSlider_Step()
	{
		// Arrange
		var cut = Render(@<FluentSlider Max="42.2" Step="1.5" />);

		// Assert
		cut.Verify();
	}

	[Theory]
	[InlineData(SliderMode.SingleValue)]
	[InlineData((SliderMode)999)]
	public void FluentSlider_Mode(SliderMode sliderMode)
	{
		// Arrange && Act
		using var cut = Render(@<FluentSlider Max="10" Mode="@sliderMode" />);

		// Assert
		cut.Verify(suffix: sliderMode.ToString());
	}

	[Theory]
	[InlineData(Orientation.Horizontal)]
	[InlineData(Orientation.Vertical)]
	[InlineData((Orientation)999)]
	public void FluentSlider_Orientation(Orientation orientation)
	{
		// Arrange && Act
		using var cut = Render(@<FluentSlider Max="10" Orientation="@orientation" />);

		// Assert
		cut.Verify(suffix: orientation.ToString());
	}

	[Fact]
	public void FluentSlider_Binding_int()
	{
		// Arrange
		int value = 3;
		var cut = Render(@<FluentSlider Max="10" Step="1" @bind-Value="@value"></FluentSlider>);

		// Act
		var slider = cut.Find("fluent-slider");
		slider.TriggerEvent("onchange", new ChangeEventArgs { Value = 2 });

		// Assert
		Assert.Equal(2, value);
	}

	[Fact]
	public void FluentSlider_Binding_double()
	{
		// Arrange
		double value = 3.5;
		var cut = Render(@<FluentSlider Max="10" Step="0.5" @bind-Value="@value" />);

		// Act
		var slider = cut.Find("fluent-slider");
		slider.TriggerEvent("onchange", new ChangeEventArgs { Value = 1.5 });

		// Assert
		Assert.Equal(1.5, value);
	}

	[Fact]
	public void FluentSlider_Label()
	{
		// Arrange && Act
		var cut = Render(@<FluentSlider Max="10" Label="label" />);

		// Assert
		cut.Verify();
	}


	[Fact]
	public void FluentSlider_Slot_Thumb()
	{
		// Arrange && Act
		var cut = Render(@<FluentSlider Max="10"><p slot="thumb"></p></FluentSlider>);

		// Assert
		cut.Verify();
	}
}
