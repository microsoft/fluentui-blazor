@using Microsoft.FluentUI.AspNetCore.Components.Utilities
@using Xunit;
@using Microsoft.FluentUI.AspNetCore.Components.Tests.Samples;
@inherits TestContext
@code
{
	public FluentSliderTests()
	{
		JSInterop.Mode = JSRuntimeMode.Loose;
		Services.AddFluentUIComponents();
	}

	[Fact]
	public void FluentSlider_Default()
	{
		// Arrange && Act
		var cut = Render(@<FluentSlider Max="10">fluent-Slider</FluentSlider>);

		// Assert
		cut.Verify();
	}

	[Fact]
	public void FluentSlider_Min()
	{
		// Arrange && Act
		var cut = Render(@<FluentSlider Min="2" Max="10" />);

		// Assert
		cut.Verify();
	}

	[Theory]
	[InlineData(SliderSize.Medium)]
	[InlineData(SliderSize.Small)]
	[InlineData((SliderSize)999)]
	public void FluentSlider_Size(SliderSize sliderSize)
	{
		// Arrange && Act
		using var cut = Render(@<FluentSlider Max="10" Size="@sliderSize" />);

		// Assert
		cut.Verify(suffix: sliderSize.ToString());
	}

	[Theory]
	[InlineData(true)]
	[InlineData(false)]
	public void FluentSlider_DisabledAttribute(bool disabled)
	{
		// Arrange && Act
		var cut = Render(@<FluentSlider Max="10" Disabled="@disabled" />);

		// Assert
		var actual = cut.Find("fluent-slider").HasAttribute("disabled");
		Assert.Equal(disabled, actual);
	}

	[Fact]
	public void FluentSlider_Value()
	{
		int value = 42;
		// Arrange
		var cut = Render(@<FluentSlider Max="10" @bind-Value="@value" />);

		// Assert
		cut.Verify();
	}

	[Fact]
	public void FluentSlider_Value_Double()
	{
		// Arrange && Act
		double value = 16.10;
		var cut = Render(@<FluentSlider Max="10" @bind-Value="@value" />);

		// Assert
		cut.Verify();
	}

	[Fact]
	public void FluentSlider_Value_Long()
	{
		// Arrange && Act
		long value = long.MaxValue;
		var cut = Render(@<FluentSlider Max="10" @bind-Value="@value" />);

		// Assert
		cut.Verify();
	}

	[Fact]
	public void FluentSlider_Value_Float()
	{
		// Arrange && Act
		float value = float.MaxValue;
		var cut = Render(@<FluentSlider Max="10" @bind-Value="@value" />);

		// Assert
		cut.Verify();
	}

	// [Fact]
	// public void FluentSlider_Value_Short()
	// {
	// 	// Arrange && Act
	// 	short value = short.MaxValue;
	// 	var cut = Render(@<FluentSlider Max="10" @bind-Value="@value" />);

	// 	// Assert
	// 	cut.Verify();
	// }

	[Fact]
	public void FluentSlider_Value_Decimal()
	{
		// Arrange && Act
		decimal value = decimal.MaxValue;
		var cut = Render(@<FluentSlider Max="10" @bind-Value="@value" />);

		// Assert
		cut.Verify();
	}

	[Fact]
	public void FluentSlider_Step()
	{
		// Arrange
		var cut = Render(@<FluentSlider Max="42.2" Step="1.5" />);

		// Assert
		cut.Verify();
	}

	[Theory]
	[InlineData(SliderMode.SingleValue)]
	[InlineData((SliderMode)999)]
	public void FluentSlider_Mode(SliderMode sliderMode)
	{
		// Arrange && Act
		using var cut = Render(@<FluentSlider Max="10" Mode="@sliderMode" />);

		// Assert
		cut.Verify(suffix: sliderMode.ToString());
	}

	[Theory]
	[InlineData(Orientation.Horizontal)]
	[InlineData(Orientation.Vertical)]
	[InlineData((Orientation)999)]
	public void FluentSlider_Orientation(Orientation orientation)
	{
		// Arrange && Act
		using var cut = Render(@<FluentSlider Max="10" Orientation="@orientation" />);

		// Assert
		cut.Verify(suffix: orientation.ToString());
	}

	[Fact]
	public void FluentSlider_Binding_int()
	{
		// Arrange
		int value = 3;
		var cut = Render(@<FluentSlider Max="10" Step="1" @bind-Value="@value"></FluentSlider>);

		// Act
		var slider = cut.Find("fluent-slider");
		slider.TriggerEvent("onchange", new ChangeEventArgs { Value = 2 });

		// Assert
		Assert.Equal(2, value);
	}

	[Fact]
	public void FluentSlider_Binding_double()
	{
		// Arrange
		double value = 3.5;
		var cut = Render(@<FluentSlider Max="10" Step="0.5" @bind-Value="@value" />);

		// Act
		var slider = cut.Find("fluent-slider");
		slider.TriggerEvent("onchange", new ChangeEventArgs { Value = 1.5 });

		// Assert
		Assert.Equal(1.5, value);
	}

	[Fact]
	public void FluentSlider_Label()
	{
		// Arrange && Act
		var cut = Render(@<FluentSlider Max="10" Label="label" />);

		// Assert
		cut.Verify();
	}


	[Fact]
	public void FluentSlider_Slot_Thumb()
	{
		// Arrange && Act
		var cut = Render(@<FluentSlider Max="10"><p slot="thumb"></p></FluentSlider>);

		// Assert
		cut.Verify();
	}
}
