@using Microsoft.FluentUI.AspNetCore.Components.Tests.Extensions
@using Microsoft.FluentUI.AspNetCore.Components.Utilities
@using Xunit;
@inherits Bunit.TestContext

@code
{
    public FluentLayoutTests()
    {
        JSInterop.Mode = JSRuntimeMode.Loose;
        Services.AddFluentUIComponents();
    }

    [Fact]
    public void FluentLayout_Default()
    {
        // Arrange && Act
        var cut = Render(@<div>
            <FluentLayout Id="my-id">
                <FluentLayoutItem Area="LayoutArea.Header">Header</FluentLayoutItem>
                <FluentLayoutItem Area="LayoutArea.Menu">Menu</FluentLayoutItem>
                <FluentLayoutItem Area="LayoutArea.Content">Content</FluentLayoutItem>
                <FluentLayoutItem Area="LayoutArea.Aside">Aside</FluentLayoutItem>
                <FluentLayoutItem Area="LayoutArea.Footer">Footer</FluentLayoutItem>
            </FluentLayout>
        </div>);

        // Assert
        cut.Verify();
    }

    [Fact]
    public void FluentLayout_HeaderFooterOutside()
    {
        // Arrange && Act
        var cut = Render(@<div>
            <FluentLayoutItem Area="LayoutArea.Header">Header</FluentLayoutItem>
            <FluentLayout Id="my-id">
                <FluentLayoutItem Area="LayoutArea.Menu">Menu</FluentLayoutItem>
                <FluentLayoutItem Area="LayoutArea.Content">Content</FluentLayoutItem>
                <FluentLayoutItem Area="LayoutArea.Aside">Aside</FluentLayoutItem>
            </FluentLayout>
            <FluentLayoutItem Area="LayoutArea.Footer">Footer</FluentLayoutItem>
        </div>);

        // Assert
        cut.Verify();
    }

    [Fact]
    public void FluentLayout_Sticky()
    {
        // Arrange && Act
        var cut = Render(@<FluentLayout Id="my-id"><FluentLayoutItem Area="LayoutArea.Content" Sticky="true">Content</FluentLayoutItem></FluentLayout>);

        // Assert
        Assert.Contains("sticky", cut.Markup);
        cut.Verify();
    }

    [Fact]
    public void FluentLayout_AsideSticky_Scrollbar()
    {
        // Arrange && Act
        var cut = Render(@<FluentLayout Id="my-id" GlobalScrollbar="false">
            <FluentLayoutItem Area="LayoutArea.Content">Content</FluentLayoutItem>
            <FluentLayoutItem Area="LayoutArea.Aside" Sticky="true">Aside</FluentLayoutItem>
        </FluentLayout>);

        // Assert
        Assert.Contains($"margin-right: {FluentLayoutItem.SCROLLBAR_WIDTH}", cut.Markup);
        cut.Verify();
    }

    [Fact]
    public void FluentLayout_HeaderSticky()
    {
        // Arrange && Act
        var cut = Render(@<FluentLayout Id="my-id">
            <FluentLayoutItem Area="LayoutArea.Header" Sticky="true">Header</FluentLayoutItem>
            <FluentLayoutItem Area="LayoutArea.Content">Content</FluentLayoutItem>
        </FluentLayout>);

        // Assert
        Assert.Contains("top: 44px", cut.Markup);
        cut.Verify();
    }

    [Fact]
    public void FluentLayout_HeaderFooterInternalProperties()
    {
        // Arrange && Act
        var cut = Render(@<FluentLayout Id="my-id">
            <FluentLayoutItem Area="LayoutArea.Header" Height="40px" Sticky="true">Header</FluentLayoutItem>
            <FluentLayoutItem Area="LayoutArea.Content">Content</FluentLayoutItem>
            <FluentLayoutItem Area="LayoutArea.Footer" Height="30px" Sticky="true">Footer</FluentLayoutItem>
        </FluentLayout>);

        var layout = cut.FindComponent<FluentLayout>();

        // Assert
        Assert.Equal("40px", layout.Instance.HeaderHeight);
        Assert.True(layout.Instance.HasHeader);
        Assert.True(layout.Instance.HeaderSticky);

        Assert.Equal("30px", layout.Instance.FooterHeight);
        Assert.True(layout.Instance.HasFooter);
        Assert.True(layout.Instance.FooterSticky);
    }

    [Fact]
    public void FluentLayout_Hamburger_Default()
    {
        // Arrange && Act
        var cut = Render(@<FluentLayout Id="my-id">
    <FluentLayoutItem Area="LayoutArea.Header">
        <FluentLayoutHamburger />
        Header
    </FluentLayoutItem>
    <FluentLayoutItem Area="LayoutArea.Content">Content</FluentLayoutItem>
</FluentLayout>
    );

        // Assert
        cut.Verify();
    }

    [Fact]
    public void FluentLayout_Hamburger_OutsideLayout()
    {
        // Arrange && Act
        var cut = Render(@<div>
    <FluentLayoutHamburger Id="my-hamburger" />
    <FluentLayout Id="my-id">
        <FluentLayoutItem Area="LayoutArea.Header">Header</FluentLayoutItem>
        <FluentLayoutItem Area="LayoutArea.Content">Content</FluentLayoutItem>
    </FluentLayout>
</div>
    );

        // Assert
        cut.Verify();
    }

    [Fact]
    public async Task FluentLayout_Hamburger_Opened()
    {
        bool isOpened = false;

        // Arrange
        var cut = Render(@<FluentLayout Id="my-id">
    <FluentLayoutItem Area="LayoutArea.Header">
        <FluentLayoutHamburger Id="my-hamburger" OnOpened="@(e => isOpened = e.Opened)" />
        Header
    </FluentLayoutItem>
    <FluentLayoutItem Area="LayoutArea.Content">Content</FluentLayoutItem>
</FluentLayout>
    );

        // Act
        await cut.FindComponent<FluentLayoutHamburger>()
                 .Instance
                 .FluentLayout_HamburgerClickAsync(isExpanded: true);

        // Assert
        Assert.True(isOpened);
    }

    [Fact]
    public void FluentLayout_InvalidArea()
    {
        // Arrange && Act
        var cut = Render(@<FluentLayout Id="my-id" GlobalScrollbar="false">
            <FluentLayoutItem Area="(LayoutArea)999" Height="36px">Content</FluentLayoutItem>
            <FluentLayoutItem Area="(LayoutArea)888" Height="42px" Sticky="true">Aside</FluentLayoutItem>
        </FluentLayout>);

        // Assert
        Assert.Contains("style=\"height: 36px;\" area=\"\"", cut.Markup);
        Assert.Contains("style=\"height: 42px;\" area=\"\"", cut.Markup);
    }

    [Fact]
    public void FluentLayout_AddInvalidArea()
    {
        // Arrange
        var cut = Render(@<FluentLayout Id="my-id" />);

        // Act
        var instance = cut.FindComponent<FluentLayout>().Instance;
        Assert.Throws<ArgumentException>(() =>
        {
            instance.AddItem(new FluentButton());
        });
    }

    [Fact]
    public void FluentLayout_RemoveInvalidArea()
    {
        // Arrange
        var cut = Render(@<FluentLayout Id="my-id" />);

        // Act
        var instance = cut.FindComponent<FluentLayout>().Instance;
        Assert.Throws<ArgumentException>(() =>
        {
            instance.RemoveItem(new FluentButton());
        });
    }

    [Theory]
    [InlineData(false, "mobile", true)]
    [InlineData(true, "mobile", null)]
    [InlineData(false, "desktop", null)]
    [InlineData(true, "desktop", false)]
    public async Task FluentLayout_MediaChangedAsync(bool initialMobileView, string size, bool? expectedMobileView)
    {
        bool? isMobileView = null;

        // Arrange
        var cut = Render(@<FluentLayout Id="my-id"
                                        MenuDeferredLoading="true"
                                        OnBreakpointEnter="@(e => isMobileView = e)">
            <FluentLayoutItem Area="LayoutArea.Header">
                <FluentLayoutHamburger />
                Header
            </FluentLayoutItem>
            <FluentLayoutItem Area="LayoutArea.Menu">
                Menu content
            </FluentLayoutItem>
        </FluentLayout>
    );

        // Act
        var instance = cut.FindComponent<FluentLayout>().Instance;
        instance.IsMobile = initialMobileView;
        await instance.FluentLayout_MediaChangedAsync(size);

        // Assert
        Assert.Equal(expectedMobileView, isMobileView);
    }
}
