@using Microsoft.FluentUI.AspNetCore.Components.Utilities
@using Xunit
@inherits TestContext

@code {
    public FluentMenuTests()
    {
        JSInterop.Mode = JSRuntimeMode.Loose;
        Services.AddFluentUIComponents();
    }

    [Fact]
    public void FluentMenu_MenuItemChecked()
    {
        var check = false;
        var label = "My item";
        var item = new FluentMenuItem();
        var a = new MenuItemEventArgs { Id = "myid",Text = label, Checked = true };

        // Arrange
        var cut = Render(@<FluentMenu OnCheckedChanged="@(()=> {check = true;})">
            <FluentMenuList>
                <FluentMenuItem Id="myid" @ref=item Role="MenuItemRole.Checkbox" @onmenuitemchange="@((args) => { a = args; })" CheckedChanged="@(() => { })">
                    @label
                </FluentMenuItem>
            </FluentMenuList>
        </FluentMenu>);

        // Act
        cut.Find("fluent-menu-item").TriggerEvent("onmenuitemchange", a);

        // Assert
        Assert.True(check);
        Assert.Equal(label, a.Text);
        Assert.Equal(item, a.Item);
        Assert.True(a.Checked);
    }

    [Fact]
    public void FluentMenu_MenuItemClicked()
    {
        // Arrange
        var click = false;
        var label = "My item";
        var item = new FluentMenuItem();
        var a = new MenuItemEventArgs { Id="myid", Text = label, Checked = null };

        var cut = Render(@<FluentMenu OnClick="@(() => { click = true; })">
            <FluentMenuList>
                <FluentMenuItem Id="myid" @ref=item @onmenuitemchange="@((args) => { a = args; })" OnClick="@(() => { })">
                    @label
                </FluentMenuItem>
            </FluentMenuList>
        </FluentMenu>
        );

        // Act
        cut.Find("fluent-menu-item").TriggerEvent("onmenuitemchange", a);

        // Assert
        Assert.True(click);
        Assert.Equal(label, a.Text);
        Assert.Equal(item, a.Item);
    }

    [Fact]
    public void FluentMenu_WithTrigger()
    {
        // Arrange

        var label = "My item";


        var cut = Render(@<div>
                <FluentButton Id="trigger">Trigger</FluentButton>
                <FluentMenu Trigger="trigger">
                    <FluentMenuList>
                        <FluentMenuItem>
                            @label
                        </FluentMenuItem>
                    </FluentMenuList>
                </FluentMenu>
             </div>
        );

        // Act
        cut.Find("fluent-button").Click();

        // Assert
        cut.Verify();
    }


    [Fact]
    public void FluentMenu_OpenMenu()
    {
        // Arrange

        var label = "My item";
        var menu = new FluentMenu();

        var cut = Render(@<div>
                <FluentButton OnClick="@(()=> menu.OpenMenuAsync())">Open menu</FluentButton>
                <FluentMenu @ref="menu">
                    <FluentMenuList>
                        <FluentMenuItem>
                            @label
                        </FluentMenuItem>
                    </FluentMenuList>
                </FluentMenu>
            </div>
        );

        // Act
        cut.Find("fluent-button").Click();

        // Assert
        cut.Verify();
    }

    [Fact]
    public void FluentMenu_CloseMenu()
    {
        // Arrange

        var label = "My item";
        var menu = new FluentMenu();

        var cut = Render(@<div>
                <FluentButton OnClick="@(() => menu.CloseMenuAsync())">Open menu</FluentButton>
                <FluentMenu @ref="menu">
                    <FluentMenuList>
                        <FluentMenuItem>
                            @label
                        </FluentMenuItem>
                    </FluentMenuList>
                </FluentMenu>
            </div>
        );

        // Act
        cut.Find("fluent-button").Click();

        // Assert
        cut.Verify();
    }
}
