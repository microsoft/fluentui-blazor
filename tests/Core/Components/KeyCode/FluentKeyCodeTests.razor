@using Xunit;
@inherits Bunit.TestContext
@code
{
    public FluentKeyCodeTests()
    {
        JSInterop.Mode = JSRuntimeMode.Loose;
        Services.AddFluentUIComponents();
    }

    [Fact]
    public async Task FluentKeyCode_KeyA()
    {
        FluentKeyCodeEventArgs pressed = new();

        // Arrange && Act
        var cut = Render(@<div id="myZone"><FluentKeyCode Anchor="myZone" OnKeyDown="@(e => pressed = e)" /></div>);

        await cut.FindComponent<FluentKeyCode>().Instance.OnKeyDownRaisedAsync(65, "A", false, false, false, false, 0, "myZone", false);

        // Assert
        Assert.Equal(65, pressed.KeyCode);
        Assert.Equal(KeyCode.KeyA, pressed.Key);
        Assert.Equal("A", pressed.Value);

        Assert.False(pressed.CtrlKey);
        Assert.False(pressed.ShiftKey);
        Assert.False(pressed.AltKey);
        Assert.False(pressed.MetaKey);
    }

    [Fact]
    public async Task FluentKeyCode_KeyDown_KeyA()
    {
        FluentKeyCodeEventArgs pressed = new();

        // Arrange && Act
        var cut = Render(@<div id="myZone"><FluentKeyCode Anchor="myZone" OnKeyUp="@(e => pressed = e)" /></div>);

        await cut.FindComponent<FluentKeyCode>().Instance.OnKeyUpRaisedAsync(65, "A", false, false, false, false, 0, "myZone", false);

        // Assert
        Assert.Equal(65, pressed.KeyCode);
    }

    [Fact]
    public async Task FluentKeyCode_ChildContent()
    {
        FluentKeyCodeEventArgs pressed = new();

        // Arrange && Act
        var cut = Render(@<FluentKeyCode OnKeyDown="@(e => pressed = e)">Hello World</FluentKeyCode>);

        await cut.FindComponent<FluentKeyCode>().Instance.OnKeyDownRaisedAsync(65, "A", false, false, false, false, 0, "myZone", false);

        // Assert
        Assert.Equal(65, pressed.KeyCode);
        Assert.Equal(KeyCode.KeyA, pressed.Key);
        Assert.Equal("A", pressed.Value);

        Assert.False(pressed.CtrlKey);
        Assert.False(pressed.ShiftKey);
        Assert.False(pressed.AltKey);
        Assert.False(pressed.MetaKey);
    }

    [Fact]
    public async Task FluentKeyCode_CtrlShiftAltMeta()
    {
        FluentKeyCodeEventArgs pressed = new();

        // Arrange && Act
        var cut = Render(@<div id="myZone"><FluentKeyCode Anchor="myZone" OnKeyDown="@(e => pressed = e)" /></div>);

        await cut.FindComponent<FluentKeyCode>().Instance.OnKeyDownRaisedAsync(65, "A", true, true, true, true, 0, "myZone", false);

        // Assert
        Assert.Equal(65, pressed.KeyCode);
        Assert.Equal(KeyCode.KeyA, pressed.Key);
        Assert.Equal("A", pressed.Value);

        Assert.True(pressed.CtrlKey);
        Assert.True(pressed.ShiftKey);
        Assert.True(pressed.AltKey);
        Assert.True(pressed.MetaKey);
    }

    [Theory]
    [InlineData(false, false, false, false, "A")]
    [InlineData(true, false, false, false, "Ctrl + A")]
    [InlineData(false, true, false, false, "Shift + A")]
    [InlineData(false, false, true, false, "Alt + A")]
    [InlineData(false, false, false, true, "Meta + A")]
    [InlineData(true, true, true, true, "Ctrl + Shift + Alt + Meta + A")]
    public async Task FluentKeyCode_KeyA_ToString(bool ctrlKey, bool shiftKey, bool altKey, bool metaKey, string expected)
    {
        FluentKeyCodeEventArgs pressed = new();

        // Arrange && Act
        var cut = Render(@<div id="myZone"><FluentKeyCode Anchor="myZone" OnKeyDown="@(e => pressed = e)" /></div>);

        await cut.FindComponent<FluentKeyCode>().Instance.OnKeyDownRaisedAsync(65, "A", ctrlKey, shiftKey, altKey, metaKey, 0, "myZone", false);

        // Assert
        Assert.Equal(expected, pressed.ToString());
    }

    [Fact]
    public async Task FluentKeyCode_Provider_Function()
    {
        FluentKeyCodeEventArgs pressed = new();
        FluentKeyCodeEventArgs myKey = new() { Key = KeyCode.KeyA, KeyCode = 65, Value = "A" };

        // Register Service
        var keycodeService = new KeyCodeService();
        Services.AddScoped<IKeyCodeService>(factory => keycodeService);

        // Arrange
        var cut = Render(@<div id="myZone"><FluentKeyCodeProvider /></div>);
        keycodeService.RegisterListener(OnKeyHandlerAsync);

        // Act
        await keycodeService.Listeners.First().OnKeyDownAsync(myKey);

        // Assert
        Assert.Equal(65, pressed.KeyCode);
        Assert.Equal(KeyCode.KeyA, pressed.Key);
        Assert.Equal("A", pressed.Value);

        // Dispose
        keycodeService.UnregisterListener(OnKeyHandlerAsync);
        Assert.Empty(keycodeService.Listeners);
        keycodeService.Dispose();

        // Local Handler
        Task OnKeyHandlerAsync(FluentKeyCodeEventArgs args)
        {
            pressed = args;
            return Task.CompletedTask;
        }
    }

    [Fact]
    public async Task FluentKeyCode_Provider_KeyDown_KeyUp()
    {
        FluentKeyCodeEventArgs keyDownPressed = new();
        FluentKeyCodeEventArgs keyUpPressed = new();
        FluentKeyCodeEventArgs myKey = new() { Key = KeyCode.KeyA, KeyCode = 65, Value = "A" };

        // Register Service
        var keycodeService = new KeyCodeService();
        Services.AddScoped<IKeyCodeService>(factory => keycodeService);

        // Arrange
        var cut = Render(@<div id="myZone"><FluentKeyCodeProvider /></div>);
        keycodeService.RegisterListener(OnKeyDownHandlerAsync, OnKeyUpHandlerAsync);

        // Key down
        await keycodeService.Listeners.First().OnKeyDownAsync(myKey);

        // Assert
        Assert.Equal(65, keyDownPressed.KeyCode);
        Assert.Equal(KeyCode.KeyA, keyDownPressed.Key);
        Assert.Equal("A", keyDownPressed.Value);

        // Key up
        await keycodeService.Listeners.First().OnKeyUpAsync(myKey);

        // Assert
        Assert.Equal(65, keyDownPressed.KeyCode);
        Assert.Equal(KeyCode.KeyA, keyDownPressed.Key);
        Assert.Equal("A", keyDownPressed.Value);

        // Dispose
        keycodeService.UnregisterListener(OnKeyDownHandlerAsync, OnKeyUpHandlerAsync);
        Assert.Empty(keycodeService.Listeners);
        keycodeService.Dispose();

        // Local Handler
        Task OnKeyDownHandlerAsync(FluentKeyCodeEventArgs args)
        {
            keyDownPressed = args;
            return Task.CompletedTask;
        }

        Task OnKeyUpHandlerAsync(FluentKeyCodeEventArgs args)
        {
            keyUpPressed = args;
            return Task.CompletedTask;
        }
    }

    [Fact]
    public async Task FluentKeyCode_Provider_NoFunction()
    {
        FluentKeyCodeEventArgs myKey = new() { Key = KeyCode.KeyA, KeyCode = 65, Value = "A" };

        // Register Service
        var keycodeService = new KeyCodeService();
        Services.AddScoped<IKeyCodeService>(factory => keycodeService);

#nullable disable   // To force null references
        keycodeService.RegisterListener(null, null);
#nullable enable

        // Arrange
        var cut = Render(@<div id="myZone"><FluentKeyCodeProvider /></div>);

        // Act
        await keycodeService.Listeners.First().OnKeyDownAsync(myKey);
        await keycodeService.Listeners.First().OnKeyUpAsync(myKey);

        // Dispose
        keycodeService.Dispose();
    }

    [Fact]
    public async Task FluentKeyCode_Provider_KeyDownHandler_KeyUpHandler()
    {
        FluentKeyCodeEventArgs keyDownPressed = new();
        FluentKeyCodeEventArgs keyUpPressed = new();
        FluentKeyCodeEventArgs myKey = new() { Key = KeyCode.KeyA, KeyCode = 65, Value = "A" };

        // Register Service
        var keycodeService = new KeyCodeService();
        Services.AddScoped<IKeyCodeService>(factory => keycodeService);
        keycodeService.RegisterListener(OnKeyDownHandlerAsync, OnKeyUpHandlerAsync);

        // Arrange
        var cut = Render(@<div id="myZone"><FluentKeyCodeProvider /></div>);

        // Act
        var provider = cut.FindComponent<FluentKeyCodeProvider>().Instance;
        await provider.KeyDownHandlerAsync(myKey);
        await provider.KeyUpHandlerAsync(myKey);

        // Assert
        Assert.Equal(65, keyDownPressed.KeyCode);
        Assert.Equal(65, keyUpPressed.KeyCode);

        // Local Handler
        Task OnKeyDownHandlerAsync(FluentKeyCodeEventArgs args)
        {
            keyDownPressed = args;
            return Task.CompletedTask;
        }

        Task OnKeyUpHandlerAsync(FluentKeyCodeEventArgs args)
        {
            keyUpPressed = args;
            return Task.CompletedTask;
        }
    }

    [Fact]
    public async Task FluentKeyCode_Provider_Interface()
    {
        FluentKeyCodeEventArgs pressed = new();
        FluentKeyCodeEventArgs myKey = new() { Key = KeyCode.KeyA, KeyCode = 65, Value = "A" };

        // Register Service
        var keycodeService = new KeyCodeService();
        Services.AddScoped<IKeyCodeService>(factory => keycodeService);

        // Create a listener
        var listener = new MyKeyCodeListener(e => pressed = e);

        // Arrange
        var cut = Render(@<div id="myZone"><FluentKeyCodeProvider /></div>);
        keycodeService.RegisterListener(listener);

        // Act
        await keycodeService.Listeners.First().OnKeyDownAsync(myKey);

        // Assert
        Assert.Equal(65, pressed.KeyCode);
        Assert.Equal(KeyCode.KeyA, pressed.Key);
        Assert.Equal("A", pressed.Value);

        // Dispose
        keycodeService.UnregisterListener(listener);
        keycodeService.Clear();
        Assert.Empty(keycodeService.Listeners);
        keycodeService.Dispose();

    }

    [Fact]
    public async Task FluentKeyCode_AnchorOrChildContent_Required()
    {
        FluentKeyCodeEventArgs pressed = new();

        // Arrange && Act
        var exception = Assert.Throws<ArgumentNullException>(() =>
        {
            var cut = Render(@<FluentKeyCode OnKeyDown="@(e => pressed = e)"></FluentKeyCode>        );
        });

        Assert.Equal("The Anchor parameter must be set to the ID of an element. Or the ChildContent must be set to apply the KeyCode engine to this content.", exception.Message);

        // To avoid warning on "async Task"
        await Task.CompletedTask;
    }

    private class MyKeyCodeListener : IKeyCodeListener
    {
        private Action<FluentKeyCodeEventArgs> _actionKeyDown;
        private Action<FluentKeyCodeEventArgs>? _actionKeyUp;

        public MyKeyCodeListener(Action<FluentKeyCodeEventArgs> actionKeyDown, Action<FluentKeyCodeEventArgs>? actionKeyUp = null)
        {
            _actionKeyDown = actionKeyDown;
            _actionKeyUp = actionKeyUp;
        }

        public Task OnKeyDownAsync(FluentKeyCodeEventArgs args)
        {
            _actionKeyDown.Invoke(args);
            return Task.CompletedTask;
        }

        public Task OnKeyUpAsync(FluentKeyCodeEventArgs args)
        {
            _actionKeyUp?.Invoke(args);
            return Task.CompletedTask;
        }
    }
}
