@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using Microsoft.FluentUI.AspNetCore.Components.Utilities
@using Xunit;
@using Microsoft.FluentUI.AspNetCore.Components.Tests.Samples;
@inherits TestContext
@code
{
    public FluentTooltipTests()
    {
        JSInterop.Mode = JSRuntimeMode.Loose;
        Services.AddFluentUIComponents();
    }

    [Fact]
    public void FluentTooltip_Default()
    {
        // Arrange
        var cut = Render(@<div>
            <FluentTooltipProvider />
            <FluentButton Id="MyButton" />
            <FluentTooltip Anchor="MyButton">My content</FluentTooltip>
        </div>);

        // Assert
        cut.Verify();
    }

    [Fact]
    public void FluentTooltip_NoTooltipProvider()
    {
        // Arrange
        var cut = Render(@<div>
            <FluentButton Id="MyButton" />
            <FluentTooltip Anchor="MyButton" UseTooltipService="false">My content</FluentTooltip>
        </div>);

        // Assert
        cut.Verify();
    }

    [Fact]
    public void FluentTooltip_Delay()
    {
        // Arrange
        var cut = Render(@<div>
            <FluentTooltipProvider />
            <FluentTooltip Anchor="MyButton" Delay="500">My content</FluentTooltip>
        </div>);

        // Act
        var att = cut.Find("fluent-tooltip").GetAttribute("delay");

        // Assert
        Assert.Equal("500", att);
    }

    [Theory]
    [InlineData(Positioning.AboveEnd)]
    [InlineData(Positioning.AboveStart)]
    [InlineData(Positioning.Above)]
    [InlineData(Positioning.BelowStart)]
    [InlineData(Positioning.Below)]
    [InlineData(Positioning.BelowEnd)]
    [InlineData(Positioning.BeforeTop)]
    [InlineData(Positioning.Before)]
    [InlineData(Positioning.BeforeBottom)]
    [InlineData(Positioning.AfterTop)]
    [InlineData(Positioning.After)]
    [InlineData(Positioning.AfterBottom)]
    [InlineData(Positioning.CenterCenter)]
    [InlineData(null)]
    [InlineData((Positioning)999)]
    public void FluentTooltip_Positioning(Positioning? positioning)
    {
        // Arrange
        var cut = Render(@<div>
            <FluentTooltipProvider />
            <FluentTooltip Anchor="MyButton" Positioning="@positioning">My content</FluentTooltip>
        </div>);

        // Act
        var att = cut.Find("fluent-tooltip").GetAttribute("positioning");

        // Assert
        Assert.Equal(positioning.ToAttributeValue(), att);
    }

    [Fact]
    public void FluentTooltip_MaxWidth()
    {
        // Arrange
        var cut = Render(@<div>
            <FluentTooltipProvider />
            <FluentTooltip Anchor="MyButton" MaxWidth="200px">My content</FluentTooltip>
        </div>);

        // Act
        var att = cut.Find("fluent-tooltip").GetAttribute("style");

        // Assert
        Assert.Equal("max-width: 200px;", att);
    }

    [Fact]
    public void FluentTooltip_SpacingHorizontal()
    {
        // Arrange
        var cut = Render(@<div>
            <FluentTooltipProvider />
            <FluentTooltip Anchor="MyButton" SpacingHorizontal="20px">My content</FluentTooltip>
        </div>);

        // Act
        var att = cut.Find("fluent-tooltip").GetAttribute("style");

        // Assert
        Assert.Equal("margin-inline: 20px;", att);
    }

    [Fact]
    public void FluentTooltip_SpacingVertical()
    {
        // Arrange
        var cut = Render(@<div>
            <FluentTooltipProvider />
            <FluentTooltip Anchor="MyButton" SpacingVertical="20px">My content</FluentTooltip>
        </div>);

        // Act
        var att = cut.Find("fluent-tooltip").GetAttribute("style");

        // Assert
        Assert.Equal("margin-block: 20px;", att);
    }

    [Fact]
    public void FluentTooltip_Id_Required()
    {
        Assert.Throws<ArgumentException>(() =>
        {
            // Arrange & Act
            var cut = Render(@<div>
                <FluentTooltipProvider />
                <FluentTooltip Id="" Anchor="MyButton">My content</FluentTooltip>
            </div>);
        });
    }

    [Fact]
    public void FluentTooltip_Anchor_Required()
    {
        Assert.Throws<ArgumentException>(() =>
        {
            // Arrange & Act
            var cut = Render(@<div>
                <FluentTooltipProvider />
                <FluentTooltip Anchor="">My content</FluentTooltip>
            </div>);
        });
    }

    [Fact]
    public void FluentTooltip_Provider_Required()
    {
        var ex = Assert.Throws<ArgumentNullException>(() =>
        {
            // Arrange & Act
            var cut = Render(@<div>
                <FluentTooltip Anchor="MyButton">My content</FluentTooltip>
            </div>);
        });

        Assert.Equal("<FluentTooltipProvider /> needs to be added to the main layout of your application/site. (Parameter 'UseTooltipService')", ex.Message);
    }

    [Theory]
    [InlineData("MyTooltip", "open", true, false)]
    [InlineData("MyTooltip", "close", false, true)]
    [InlineData("MyTooltip", "", false, true)]
    [InlineData("unknownId", "open", false, false)]
    [InlineData("unknownId", "close", false, false)]
    public async Task FluentTooltip_OnToggle_OnDismissed(string id, string newState, bool expectedOpened, bool expectedDismissed)
    {
        var opened = false;
        var dismissed = false;

        // Arrange
        var cut = Render(@<div>
            <FluentTooltipProvider />
            <FluentTooltip Id="MyTooltip" Anchor="MyButton" SpacingVertical="20px"
                           OnToggle="@(e => opened = e.Opened)"
                           OnDismissed="@(e => dismissed = true)">My content</FluentTooltip>
        </div>);

        // Act
        await cut.FindComponent<FluentTooltip>().Instance.OnToggleAsync(new DialogToggleEventArgs
        {
            Id = id,
            NewState = newState,
        });

        // Assert
        Assert.Equal(expectedOpened, opened);
        Assert.Equal(expectedDismissed, dismissed);
    }
}
