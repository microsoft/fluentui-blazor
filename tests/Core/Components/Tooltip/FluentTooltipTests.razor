@using AngleSharp.Css.Dom
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using Microsoft.FluentUI.AspNetCore.Components.Utilities
@using Xunit;
@using Microsoft.FluentUI.AspNetCore.Components.Tests.Samples;
@using Microsoft.FluentUI.AspNetCore.Components.Migration;
@inherits TestContext
@code
{
    public FluentTooltipTests()
    {
        JSInterop.Mode = JSRuntimeMode.Loose;
        Services.AddFluentUIComponents();
    }

    [Fact]
    public void FluentTooltip_Default()
    {
        // Arrange
        var cut = Render(@<div>
            <FluentTooltipProvider />
            <FluentButton Id="MyButton" />
            <FluentTooltip Anchor="MyButton">My content</FluentTooltip>
        </div>);

        // Assert
        cut.Verify();
    }

    [Fact]
    public void FluentTooltip_NoTooltipProvider()
    {
        // Arrange
        var cut = Render(@<div>
            <FluentButton Id="MyButton" />
            <FluentTooltip Anchor="MyButton" UseTooltipService="false">My content</FluentTooltip>
        </div>);

        // Assert
        cut.Verify();
    }

    [Fact]
    public void FluentTooltip_Delay()
    {
        // Arrange
        var cut = Render(@<div>
            <FluentTooltipProvider />
            <FluentTooltip Anchor="MyButton" Delay="500">My content</FluentTooltip>
        </div>);

        // Act
        var att = cut.Find("fluent-tooltip").GetAttribute("delay");

        // Assert
        Assert.Equal("500", att);
    }

    [Theory]
    [InlineData(Positioning.AboveEnd)]
    [InlineData(Positioning.AboveStart)]
    [InlineData(Positioning.Above)]
    [InlineData(Positioning.BelowStart)]
    [InlineData(Positioning.Below)]
    [InlineData(Positioning.BelowEnd)]
    [InlineData(Positioning.BeforeTop)]
    [InlineData(Positioning.Before)]
    [InlineData(Positioning.BeforeBottom)]
    [InlineData(Positioning.AfterTop)]
    [InlineData(Positioning.After)]
    [InlineData(Positioning.AfterBottom)]
    [InlineData(Positioning.CenterCenter)]
    [InlineData(null)]
    [InlineData((Positioning)999)]
    public void FluentTooltip_Positioning(Positioning? positioning)
    {
        // Arrange
        var cut = Render(@<div>
            <FluentTooltipProvider />
            <FluentTooltip Anchor="MyButton" Positioning="@positioning">My content</FluentTooltip>
        </div>);

        // Act
        var att = cut.Find("fluent-tooltip").GetAttribute("positioning");

        // Assert
        Assert.Equal(positioning.ToAttributeValue(), att);
    }

    [Fact]
    public void FluentTooltip_MaxWidth()
    {
        // Arrange
        var cut = Render(@<div>
            <FluentTooltipProvider />
            <FluentTooltip Anchor="MyButton" MaxWidth="200px">My content</FluentTooltip>
        </div>);

        // Act
        var att = cut.Find("fluent-tooltip").GetStyle()["max-width"];

        // Assert
        Assert.Equal("200px", att);
    }

    [Fact]
    public void FluentTooltip_SpacingHorizontal()
    {
        // Arrange
        var cut = Render(@<div>
            <FluentTooltipProvider />
            <FluentTooltip Anchor="MyButton" SpacingHorizontal="20px">My content</FluentTooltip>
        </div>);

        // Act
        var att = cut.Find("fluent-tooltip").GetStyle()["margin-inline"];

        // Assert
        Assert.Equal("20px", att);
    }

    [Fact]
    public void FluentTooltip_SpacingVertical()
    {
        // Arrange
        var cut = Render(@<div>
            <FluentTooltipProvider />
            <FluentTooltip Anchor="MyButton" SpacingVertical="20px">My content</FluentTooltip>
        </div>);

        // Act
        var att = cut.Find("fluent-tooltip").GetStyle()["margin-block"];

        // Assert
        Assert.Equal("20px", att);
    }

    [Fact]
    public void FluentTooltip_Id_Required()
    {
        Assert.Throws<ArgumentException>(() =>
        {
            // Arrange & Act
            var cut = Render(@<div>
                <FluentTooltipProvider />
                <FluentTooltip Id="" Anchor="MyButton">My content</FluentTooltip>
            </div>);
        });
    }

    [Fact]
    public void FluentTooltip_Anchor_Required()
    {
        Assert.Throws<ArgumentException>(() =>
        {
            // Arrange & Act
            var cut = Render(@<div>
                <FluentTooltipProvider />
                <FluentTooltip Anchor="">My content</FluentTooltip>
            </div>);
        });
    }

    [Fact]
    public void FluentTooltip_Provider_Required()
    {
        var ex = Assert.Throws<ArgumentNullException>(() =>
        {
            // Arrange & Act
            var cut = Render(@<div>
                <FluentTooltip Anchor="MyButton">My content</FluentTooltip>
            </div>
    );
        });

        Assert.Equal("<FluentTooltipProvider /> needs to be added to the main layout of your application/site. (Parameter 'UseTooltipService')", ex.Message);
    }

    [Theory]
    [InlineData("MyTooltip", "open", true, false, "MyTooltip")]
    [InlineData("MyTooltip", "close", false, true, "MyTooltip")]
    [InlineData("MyTooltip", "", false, true, "MyTooltip")]
    [InlineData("UnknownId", "open", false, false, "")]
    [InlineData("UnknownId", "close", false, false, "")]
    public async Task FluentTooltip_OnToggle_OnDismissed(string id, string newState, bool expectedOpened, bool expectedDismissed, string expectedEventId)
    {
        var opened = false;
        var eventId = string.Empty;
        var dismissed = false;

        // Arrange
        var cut = Render(@<div>
            <FluentTooltipProvider />
            <FluentTooltip Id="MyTooltip" Anchor="MyButton" SpacingVertical="20px"
                           OnToggle="@(e => { opened = e.Opened; eventId = e.Id; })"
                           OnDismissed="@(e => dismissed = true)">My content</FluentTooltip>
        </div>);

        // Act
        await cut.FindComponent<FluentTooltip>().Instance.OnToggleAsync(new DialogToggleEventArgs
        {
            Id = id,
            NewState = newState,
        });

        // Assert
        Assert.Equal(expectedOpened, opened);
        Assert.Equal(expectedEventId, eventId);
        Assert.Equal(expectedDismissed, dismissed);
    }

    [Fact]
    public void FluentTooltip_ParameterValue()
    {
        bool isVisible = true;

        // Arrange
        var cut = Render(@<FluentStack>
            <FluentTooltipProvider />
            @if (isVisible)
            {
                <FluentButton Id="MyButton" Tooltip="My Tooltip" Label="Button" />
            }
        </FluentStack>
    );

        // Pre-assert
        var tooltips = Services.GetRequiredService<ITooltipService>().Items;
        Assert.Single(tooltips);

        // Act => Dispose and DisposeTooltipAsync methods will be called to remove the tooltip from the Provider.
        isVisible = false;
        cut.FindComponent<FluentStack>().Render();

        // Assert
        tooltips = Services.GetRequiredService<ITooltipService>().Items;
        Assert.Empty(tooltips);
    }

#pragma warning disable CS0618 // Type or member is obsolete

    [Theory]
    [InlineData(TooltipPosition.Top, Positioning.Above)]
    [InlineData(TooltipPosition.Bottom, Positioning.Below)]
    [InlineData(TooltipPosition.Left, Positioning.Before)]
    [InlineData(TooltipPosition.Right, Positioning.After)]
    [InlineData(TooltipPosition.Start, Positioning.AboveStart)]
    [InlineData(TooltipPosition.End, Positioning.AboveEnd)]
    [InlineData(null, Positioning.Above)]
    [InlineData((TooltipPosition)999, Positioning.Above)]
    public void FluentTooltip_TooltipPositionToPositioning(TooltipPosition? position, Positioning? expectedPositioning)
    {
        // Assert
        Assert.Equal(expectedPositioning, position.ToPositioning());
    }

#pragma warning restore CS0618 // Type or member is obsolete
}
