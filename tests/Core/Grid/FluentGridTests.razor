@using Xunit;
@inherits TestContext
@code
{
    [Fact]
    public void FluentGrid_Default()
    {
        // Arrange && Act
        var cut = Render(@<FluentGrid>My content</FluentGrid>);

        // Assert
        cut.Verify();
    }

    [Fact]
    public void FluentGrid_SpacingJustify()
    {
        // Arrange && Act
        var cut = Render(@<FluentGrid Spacing="5" Justify="JustifyContent.Center">My content</FluentGrid>);

        //Assert
        cut.Verify();
    }

    [Fact]
    public void FluentGrid_Items_Default()
    {
        // Arrange && Act
        var cut = Render(
            @<FluentGrid>
                <FluentGridItem xs="6" md="6">Cell 1</FluentGridItem>
                <FluentGridItem xs="6" md="6">Cell 2</FluentGridItem>
            </FluentGrid>);

        //Assert
        cut.Verify();
    }

    [Fact]
    public void FluentGrid_Items_AllBreakpoints()
    {
        // Arrange && Act
        var cut = Render(
            @<FluentGrid>
                <FluentGridItem xs="1" sm="2" md="3" lg="4" xl="5" xxl="6">My cell</FluentGridItem>
            </FluentGrid>);

        //Assert
        cut.Verify();
    }

    [Fact]
    public void FluentGrid_Items_JustifyGap()
    {
        // Arrange && Act
        var cut = Render(
            @<FluentGrid>
                <FluentGridItem xs="1" Justify="JustifyContent.Center" Gap="10px">My cell</FluentGridItem>
            </FluentGrid>);

        //Assert
        cut.Verify();
    }

    [Fact]
    public void FluentGrid_Items_NoBreapoint()
    {
        // Arrange && Act
        var cut = Render(
            @<FluentGrid>
                <FluentGridItem Style="min-width: 200px;">My cell</FluentGridItem>
            </FluentGrid>);

        //Assert
        cut.Verify();
    }
}