parameters:
- name: Projects		    # List of projects to build
  type: string
  default: ''

- name: Tests		        # List of Unit-Test projects to run
  type: string
  default: ''

variables:
- template: versioning.yml  # Versions

steps:

  # In the main YAML script, set the "name: $(VersionMajor).$(VersionMinor).$(VersionPatch).$(Year:yy)$(DayOfYear).$(Rev:r)"
  # - powershell: |
  #     $builds = "$(Build.BuildNumber)".Split('.')
  #     $stage = "$(VersionStage)"
  #     $stageId = "$(VersionStageId)"
      
  #     if ("$stageId" -eq "")
  #     {
  #       $package = "$($builds[0]).$($builds[1]).$($builds[2]).$($builds[3]).$($builds[4])"
  #     }
  #     else
  #     {
  #       $package = "$($builds[0]).$($builds[1]).$($builds[2])-$($stage).$($stageId).$($builds[3]).$($builds[4])"
  #     }
      
  #     $sign = "false";
  #     $toTest = "false";

  #     # If PublicVersion is set, then we are building a public and signed version.
  #     if ("$(PublicVersion)" -ne "")
  #     {
  #       $package = "$(PublicVersion)"
  #       $sign = "true"
  #     }

  #     # If Tests is set, then we are testing these projects.
  #     if ("${{ parameters.Tests }}" -ne "")
  #     {
  #       $toTest = "true"
  #     }

  #     # Set the output variable for use in other tasks.
  #     Write-Host "##vso[task.setvariable variable=VersionPackage]${package}"
  #     Write-Host "##vso[task.setvariable variable=ShouldSign]${sign}"
  #     Write-Host "##vso[task.setvariable variable=ShouldTest]${toTest}"
  #   displayName: Compute VersionPackage

  # Compute VersionPackage
  - powershell: |
  
      # Example with FileVersion: "1.2.4" and PackageSuffix: "RC.1"
      # Build.BuildNumber = 1.2.4.23296.1
      #                   = $(FileVersion).$(Year:yy)$(DayOfYear).$(Rev:r)

      # BranchName = dev, main or PR
      $branch = "PR"
      if ("$(Build.SourceBranch)" -eq "refs/heads/main")
      {
          $branch = "main"
      }
      if ("$(Build.SourceBranch)" -eq "refs/heads/dev")
      {
          $branch = "dev"
      }

      # TODO: To remove (only for testing purpose)
      if ("$(PublicVersion)" -ne "")
      {
          $branch = "$(PublicVersion)"
      }

      # [1, 2, 4, 23296, 1]
      $builds = "$(Build.BuildNumber)".Split('.')

      # 1.2.4.23296
      $assembly = "$($builds[0]).$($builds[1]).$($builds[2]).$($builds[3])"

      # 1.2.4-Preview-23296-1 (dev), 1.2.4-RC.1 (main), 1.2.4 (main)
      $package = ""

      if ("$branch" -eq "dev")
      {
          # Dev: 1.2.4-Preview-23296-1
          $package = "$($builds[0]).$($builds[1]).$($builds[2])-Preview-$($builds[3])-$($builds[4])"
      }

      if ("$branch" -eq "main")
      {
          # Main without PackageSuffix: 1.2.4
          if ("$(PackageSuffix)" -ne "")
          {
              $package = "$($builds[0]).$($builds[1]).$($builds[2])"
          }

          # Main with PackageSuffix: 1.2.4-RC.1
          else
          {
              $package = "$($builds[0]).$($builds[1]).$($builds[2])-$($builds[3])"
          }
      }

      # To Sign and To Test
      $sign = "false";      # TODO
      $toTest = "false";    # TODO
  
      # Set the output variable for use in other tasks.
      Write-Host "##vso[task.setvariable variable=BranchName]${branch}"
      Write-Host "##vso[task.setvariable variable=AssemblyVersion]${assembly}"
      Write-Host "##vso[task.setvariable variable=PackageVersion]${package}"
      Write-Host "##vso[task.setvariable variable=ShouldSign]${sign}"
      Write-Host "##vso[task.setvariable variable=ShouldTest]${toTest}"
    displayName: Compute VersionPackage

  # Display computed variables
  - script: |
      echo 🔸 Build.BuildNumber      = $(Build.BuildNumber)
      echo 🔸 Build.SourceBranch     = $(Build.SourceBranch)
      echo -----------------------------------------------
      echo 🔸 BranchName             = $(BranchName)
      echo 🔸 AssemblyVersion        = $(AssemblyVersion)
      echo 🔸 PackageVersion         = $(PackageVersion)
      echo -----------------------------------------------
      echo 🔸 ShouldSign             = $(ShouldSign)
      echo 🔸 ShouldTest             = $(ShouldTest)
    displayName: Display computed variables

  # - task: NuGetToolInstaller@1
  #   displayName: Install NuGet tools
  
  # - task: UseDotNet@2
  #   displayName: Install .NET 6.0
  #   inputs:
  #     version: 6.0.412
  #     includePreviewVersions: true
  
  # - task: UseDotNet@2
  #   displayName: 'Install .NET 7.0'
  #   inputs:
  #     version: 7.0.306
  #     includePreviewVersions: true
  
  # - task: UseDotNet@2
  #   displayName: 'Install .NET 8.0'
  #   inputs:
  #     version: 8.0.x
  #     includePreviewVersions: true
  
  # # Set version number
  # - task: Assembly-Info-NetCore@3
  #   displayName: 'Versioning $(Build.BuildNumber)'
  #   inputs:
  #     Path: '$(Build.SourcesDirectory)'
  #     FileNames: '**/*.csproj'
  #     InsertAttributes: true
  #     FileEncoding: 'auto'
  #     WriteBOM: false
  #     VersionNumber: '$(Build.BuildNumber)'
  #     FileVersionNumber: '$(Build.BuildNumber)'
  #     InformationalVersion: '$(Build.BuildNumber)'
  #     PackageVersion: '$(VersionPackage)'
  #     LogLevel: 'verbose'
  #     FailOnWarning: false
  #     DisableTelemetry: false
  
  # # Install dependencies
  # - task: DotNetCoreCLI@2
  #   displayName: Install dependencies
  #   inputs:
  #     command: 'restore'
  #     projects: ${{ parameters.Projects }}
  
  # # Build the projects
  # - task: DotNetCoreCLI@2
  #   displayName: 'Build $(Build.BuildNumber)'
  #   inputs:
  #     command: 'build'
  #     projects: ${{ parameters.Projects }}
  #     arguments: '--configuration Release'
  
  # # Test and generate Code Coverage
  # - task: DotNetCoreCLI@2
  #   condition: eq(variables['ShouldTest'], 'true')
  #   displayName: 'Test and Code Coverage'
  #   inputs:
  #     command: test
  #     projects: ${{ parameters.Tests }}
  #     arguments: '--configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:DebugType=Full'
  #     publishTestResults: true

  # # Coverage Generation
  # - task: reportgenerator@5
  #   condition: eq(variables['ShouldTest'], 'true')
  #   displayName: Generate reports
  #   inputs:
  #     reports: '**/*.cobertura.xml'
  #     targetdir: 'CoverageFolder'
  #     reporttypes: 'HtmlInline_AzurePipelines'
  
  # # Publish code coverage
  # - task: PublishCodeCoverageResults@2
  #   condition: eq(variables['ShouldTest'], 'true')
  #   displayName: 'Publish code coverage'
  #   inputs:
  #     codeCoverageTool: Cobertura
  #     summaryFileLocation: '**/*.cobertura.xml'
  #     reportDirectory: CoverageFolder

  # # - task: DotNetCoreCLI@2
  # #   displayName: Pack $(Build.BuildNumber)
  # #   inputs:
  # #     command: 'pack'
  # #     packagesToPack: ${{ parameters.Projects }}
  # #     versioningScheme: 'off'
  # #     nobuild: true
  # #     verbosityPack: 'Normal'
  # #     feedsToUse: 'config'
  # #     nugetConfigPath: 
  
  # # Since NuGet packages are generated during the build, we need to copy them to the artifacts folder.
  # - task: CopyFiles@2
  #   displayName: 'Pack $(Build.BuildNumber)'
  #   inputs:
  #     SourceFolder: '$(Build.SourcesDirectory)'
  #     Contents: '**/*$(VersionPackage).nupkg'
  #     TargetFolder: '$(Build.ArtifactStagingDirectory)'
  #     CleanTargetFolder: true
  #     OverWrite: true
  #     flattenFolders: true

  # # ESRP Code Signing SC
  # - task: EsrpCodeSigning@3
  #   condition: eq(variables['ShouldSign'], 'true')
  #   inputs:
  #     ConnectedServiceName: 'ESRP Code Signing SC'
  #     FolderPath: '$(Build.ArtifactStagingDirectory)'
  #     Pattern: '**/*.nupkg'
  #     UseMinimatch: true
  #     signConfigType: 'inlineSignParams'
  #     inlineOperation: |
  #       [
  #               {
  #                   "KeyCode" : "CP-401405",
  #                   "OperationCode" : "NuGetSign",
  #                   "Parameters" : {},
  #                   "ToolName" : "sign",
  #                   "ToolVersion" : "1.0"
  #               },
  #               {
  #                   "KeyCode" : "CP-401405",
  #                   "OperationCode" : "NuGetVerify",
  #                   "Parameters" : {},
  #                   "ToolName" : "sign",
  #                   "ToolVersion" : "1.0"
  #               }
  #             ]
  #     SessionTimeout: '60'
  #     MaxConcurrency: '200'
  #     MaxRetryAttempts: '5'

  # - task: PublishBuildArtifacts@1
  #   inputs:
  #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
