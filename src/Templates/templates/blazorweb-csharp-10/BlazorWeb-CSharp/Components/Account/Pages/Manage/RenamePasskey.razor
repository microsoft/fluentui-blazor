@page "/Account/Manage/RenamePasskey/{Id}"

@using TemplateWithPasskey.Data
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using System.Buffers.Text

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager

<FluentGrid>
    <FluentGridItem xs="12" sm="6">
        <EditForm Model="Input" OnValidSubmit="Rename" FormName="rename-passkey" method="post" style="padding: 10px 0; width: 100%;">
            <DataAnnotationsValidator />
            @if (passkey?.Name is { } name)
            {
                <h4>Enter a new name for your "@name" passkey</h4>
            }
            else
            {
                <h4>Enter a name for your passkey</h4>
            }
            <hr />
            <ValidationSummary class="text-danger" role="alert" />

            <FluentInputLabel ForId="Input.Name">Passkey name</FluentInputLabel>
            <FluentTextField Style="width: 100%;" @bind-Value="Input.Name" Id="Input.Name" Name="Input.Name" Required="true" Placeholder="My passkey" />
            <ValidationMessage For="() => Input.Name" class="text-danger" />
            <p style="margin-top: 10px; text-align: end;">
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Continue</FluentButton>
            </p>
        </EditForm>
    </FluentGridItem>
</FluentGrid>

@code {
    private ApplicationUser? user;
    private UserPasskeyInfo? passkey;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [Parameter]
    public string? Id { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();

        user = (await UserManager.GetUserAsync(HttpContext.User))!;
        if (user is null)
        {
            RedirectManager.RedirectToInvalidUser(UserManager, HttpContext);
            return;
        }

        byte[] credentialId;
        try
        {
            credentialId = Base64Url.DecodeFromChars(Id);
        }
        catch (FormatException)
        {
            RedirectManager.RedirectToWithStatus("Account/Manage/Passkeys", "Error: The specified passkey ID had an invalid format.", HttpContext);
            return;
        }

        passkey = await UserManager.GetPasskeyAsync(user, credentialId);
        if (passkey is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Manage/Passkeys", "Error: The specified passkey could not be found.", HttpContext);
            return;
        }
    }

    private async Task Rename()
    {
        passkey!.Name = Input.Name;
        var result = await UserManager.SetPasskeyAsync(user!, passkey);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToWithStatus("Account/Manage/Passkeys", "Error: The passkey could not be updated.", HttpContext);
            return;
        }

        RedirectManager.RedirectToWithStatus("Account/Manage/Passkeys", "Passkey updated successfully.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        public string Name { get; set; } = "";
    }
}
