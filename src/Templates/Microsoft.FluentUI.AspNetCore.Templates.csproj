<Project Sdk="Microsoft.NET.Sdk" InitialTargets="AddTemplatesToPackageAsContent">

	<PropertyGroup>
		<TargetFramework>net9.0</TargetFramework>
		<Authors>Microsoft</Authors>
		<ContentTargetFolders>Content</ContentTargetFolders>
		<Copyright>Â© Microsoft Corporation. All rights reserved.</Copyright>
		<Description>Project templates for creating a Fluent UI Blazor Web app, Blazor WebAssembly Standalone app, Blazor Hybrid and Web App or .NET Aspire Starter app. These templates are pure copies of the original templates but use the Fluent UI Blazor Components ibrary for building the user interface (UI).</Description>
		<IncludeContentInPack>true</IncludeContentInPack>
		<IncludeBuildOutput>false</IncludeBuildOutput>
		<License>MIT</License>
		<PackageId>Microsoft.FluentUI.AspNetCore.Templates</PackageId>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<PackageProjectUrl>https://github.com/microsoft/fluentui-blazor</PackageProjectUrl>
		<PackageTags>templates;blazor;fluentui;web-assembly</PackageTags>
		<PackageType>Template</PackageType>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<Title>Microsoft Fluent UI Blazor Templates</Title>
		<PackageIcon>icon.png</PackageIcon>
		<PackageOutputPath>$(SolutionDir)artifacts</PackageOutputPath>
		<EnableDefaultItems>false</EnableDefaultItems>
		<UsingToolTemplateLocalizer>true</UsingToolTemplateLocalizer>
		<NoWarn>$(NoWarn);NU5128</NoWarn>
	</PropertyGroup>

	<PropertyGroup>
		<!-- for templates -->
		<AspirePackageVersion>9.0.0</AspirePackageVersion>
		<MicrosoftExtensionsHttpResiliencePackageVersion>9.0.0</MicrosoftExtensionsHttpResiliencePackageVersion>
		<MicrosoftAspNetCorePackageVersionForNet8>8.0.11</MicrosoftAspNetCorePackageVersionForNet8>
		<MicrosoftAspNetCorePackageVersionForNet9>9.0.0</MicrosoftAspNetCorePackageVersionForNet9>

	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)'=='Release'">
		<IsShipping>true</IsShipping>
		<Optimize>True</Optimize>
		<NoWarn>1701;1702;8669;1591</NoWarn>
		<DebuggerSupport>false</DebuggerSupport>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<PackageOutputPath>$(SolutionDir)artifacts</PackageOutputPath>
	</PropertyGroup>
	
	 <PropertyGroup>
		<UsePublicApiAnalyzers>false</UsePublicApiAnalyzers>
	</PropertyGroup>  

	<ItemGroup>
		<None Include="templates\**\*" />
		<Content Include="content\**\*" Exclude="content\**\bin\**;content\**\obj\**" />
		
		<None Include="README.md" Pack="true" PackagePath="\" />
		<None Include="..\..\icon.png" Pack="true" PackagePath="\" />
		
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.VisualStudioEng.MicroBuild.Core">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
	</ItemGroup>


	<!-- When building a package, this target will run to copy all the templates into the intermediate directory,
			 replaces the package versions, and adds them to the package.-->
	<Target Name="AddTemplatesToPackageAsContent" DependsOnTargets="ReplacePackageVersionOnTemplates">

		<!-- Creating a temporary item instead of defining content items directly in order to avoid MSBuild MSB4120
		message shown when an item within a target references itself which may cuase unintended expansion. -->
		<ItemGroup>
			<_TemplatesForPackage Include="$(IntermediateOutputPath)\content\templates\**\*" />
		</ItemGroup>
		<ItemGroup>
			<Content Include="%(_TemplatesForPackage.Identity)" PackagePath="content/content/%(_TemplatesForPackage.RecursiveDir)" />
		</ItemGroup>
	</Target>
	
	<!-- Replaces the versions referenced by the templates projects to use the version of the packages being live-built -->
	<Target Name="ReplacePackageVersionOnTemplates" DependsOnTargets="CopyTemplatesToIntermediateOutputPath">

		<ItemGroup>
			<TemplateProjectFiles Include="templates\**\*.csproj" />
			<TemplateProjectFiles>
				<DestinationFile>$(IntermediateOutputPath)\content\templates\%(RecursiveDir)%(Filename)%(Extension)</DestinationFile>
			</TemplateProjectFiles>
		</ItemGroup>

		<WriteLinesToFile File="%(TemplateProjectFiles.DestinationFile)"
											Lines="$([System.IO.File]::ReadAllText('%(TemplateProjectFiles.FullPath)')
																								 .Replace('!!REPLACE_WITH_LATEST_VERSION!!', '$(PackageVersion)')
																								 .Replace('!!REPLACE_WITH_ASPNETCORE_8_VERSION!!', '$(MicrosoftAspNetCorePackageVersionForNet8)')
																								 .Replace('!!REPLACE_WITH_ASPNETCORE_9_VERSION!!', '$(MicrosoftAspNetCorePackageVersionForNet9)')
																								 .Replace('!!REPLACE_WITH_DOTNET_EXTENSIONS_VERSION!!', '$(MicrosoftExtensionsHttpResiliencePackageVersion)'))"
											Overwrite="true" />
	</Target>

	<!-- Grabs the contents of the templates folder and copies them to IntermediateOutputPath directory -->
	<Target Name="CopyTemplatesToIntermediateOutputPath">

		<ItemGroup>
			<_ContentFilesToPackage Include="templates\**\*" Exclude="templates\**\bin\**;templates\**\obj\**;templates\**\*.csproj" />
		</ItemGroup>

		<Copy SourceFiles="@(_ContentFilesToPackage)" SkipUnchangedFiles="true" DestinationFolder="$(IntermediateOutputPath)\content\templates\%(RecursiveDir)" />
	</Target>

</Project>
