@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.Fast.Components.FluentUI.DataGrid.Infrastructure
@namespace Microsoft.Fast.Components.FluentUI
@inherits FluentComponentBase
@typeparam TGridItem
<CascadingValue TValue="InternalGridContext<TGridItem>" IsFixed="true" Value="@_internalGridContext">
    @{ StartCollectingColumns(); }
    @ChildContent
    <Defer>
        @{ FinishCollectingColumns(); }
        <ColumnsCollectedNotifier TGridItem="TGridItem" />

        <fluent-data-grid @ref=_gridReference
                          no-tabbing=@NoTabbing
                          generate-header="none"
                          grid-template-columns=@GridTemplateColumns
                          class="@GridClass()"
                          style="@Style"
                          aria-rowcount="@(_ariaBodyRowCount + 1)"
                          @onrowfocus=HandleOnRowFocus
                          @onclosecolumnoptions="CloseColumnOptions"
                          @attributes="AdditionalAttributes"
                          @onkeydown=OnKeyPress>
            @if (GenerateHeader != GenerateHeaderOption.None)
            {
                DataGridRowType headerType = DataGridRowType.Header;
                if (GenerateHeader == GenerateHeaderOption.Sticky)
                    headerType = DataGridRowType.StickyHeader;
                <FluentDataGridRow RowType=@headerType TGridItem=TGridItem>
                    @_renderColumnHeaders
                </FluentDataGridRow>
            }

            @if (Virtualize)
            {
                <Virtualize @ref="@_virtualizeComponent"
                            TItem="(int RowIndex, TGridItem Data)"
                            ItemSize="@RowsDataSize"
                            ItemsProvider="@ProvideVirtualizedItems"
                            ItemContent="@(item => builder => RenderRow(builder, item.RowIndex, item.Data))"
                            Placeholder="@(placeholderContext => builder => RenderPlaceholderRow(builder, placeholderContext))" />
            }
            else
            {
                @_renderNonVirtualizedRows
            }

        </fluent-data-grid>
    </Defer>
</CascadingValue>

@code {

    private void RenderNonVirtualizedRows(RenderTreeBuilder __builder)
    {
        if (_internalItemsSource is null)
        {
            return;
        }
        var initialRowIndex = (GenerateHeader != GenerateHeaderOption.None) ? 2 : 1; // aria-rowindex is 1-based, plus 1 if there is a header
        var rowIndex = initialRowIndex;
        foreach (var item in _internalItemsSource)
        {
            RenderRow(__builder, rowIndex++, item);
        }
    }

    private void RenderRow(RenderTreeBuilder __builder, int rowIndex, TGridItem item)
    {
        string? _rowsDataSize = null;
        
        if (Virtualize)
        {
            _rowsDataSize = $"height: {RowsDataSize}px";
        }
        
        <FluentDataGridRow @key="@(RowsDataKey(item))" Options=@(new DataGridRowOptions<TGridItem>(rowIndex,item,GridTemplateColumns,_columns)) aria-rowindex="@rowIndex" Style="@_rowsDataSize" TGridItem="TGridItem">
           
        </FluentDataGridRow>
    }

    private void RenderPlaceholderRow(RenderTreeBuilder __builder, PlaceholderContext placeholderContext)
    {
        string? _rowsDataSize = $"height: {RowsDataSize}px";

        int colIndex = 1;
       
        
        <FluentDataGridRow GridTemplateColumns=@GridTemplateColumns aria-rowindex="@(placeholderContext.Index + 1)" Style="@_rowsDataSize" TGridItem="TGridItem">
            @foreach (var col in _columns)
            {
                <FluentDataGridCell class="@("grid-cell-placeholder " + @ColumnClass(col))" @key="@col" GridColumn=@(colIndex++) TGridItem="TGridItem">
                    @((RenderFragment)(__builder => col.RenderPlaceholderContent(__builder, placeholderContext)))
                </FluentDataGridCell>
            }
        </FluentDataGridRow>
    }

    private void RenderColumnHeaders(RenderTreeBuilder __builder)
    {
        int colIndex = 1;
        foreach (var col in _columns)
        {
            string CellId = Identifier.NewId();
                      
            <FluentDataGridCell GridColumn=@(colIndex++) CellType=DataGridCellType.ColumnHeader class="@("column-header " + @ColumnHeaderClass(col))" aria-sort="@AriaSortValue(col)" @key="@col" scope="col" TGridItem="TGridItem">
                @col.HeaderContent
                @if (col == _displayOptionsForColumn)
                {
                    <div class="col-options">@col.ColumnOptions</div>
                }
                @if (ResizableColumns)
                {
                    <FluentDivider class="col-width-draghandle" Orientation="Orientation.Vertical" Role="DividerRole.Separator" />
                }
            </FluentDataGridCell>
        }
    }
}
