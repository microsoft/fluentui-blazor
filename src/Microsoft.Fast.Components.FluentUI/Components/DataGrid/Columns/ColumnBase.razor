@using Microsoft.AspNetCore.Components.Rendering
@using System.ComponentModel
@using Microsoft.Fast.Components.FluentUI.DataGrid.Infrastructure
@namespace Microsoft.Fast.Components.FluentUI
@typeparam TGridItem
@{
    InternalGridContext.Grid.AddColumn(this);
}
@code
{
    private void RenderDefaultHeaderContent(RenderTreeBuilder __builder)
    {
        if (HeaderCellItemTemplate is not null)
        {
            @HeaderCellItemTemplate(this)
        }
        else
        {
            if (Sortable.HasValue ? Sortable.Value : IsSortableByDefault())
            {
                var sortableColumn = this as ISortableColumn<TGridItem>;
                @if (ColumnOptions is not null && Align != Align.Right)
                {
                    <FluentButton Appearance="Appearance.Stealth" class="col-options-button" @onclick="@(() => Grid.ShowColumnOptions(this))">
                        <FluentIcon Name="@FluentIcons.Filter" Size="IconSize.Size16" Filled=false />
                    </FluentButton>
                }
                <FluentButton Appearance="Appearance.Stealth" class="col-sort-button" @onclick=SortChanged>
                    <div class="col-title-text">@Title</div>


                    @if (sortableColumn!.SortDirection.HasValue)
                    {
                        <FluentIcon Name="@(sortableColumn.SortDirection.Value == ListSortDirection.Ascending ? FluentIcons.ArrowSortUp : FluentIcons.ArrowSortDown)" Size="IconSize.Size16" Filled=false Slot="@(Align == Align.Right ? "start" : "end")" />
                    }

                </FluentButton>
                @if (ColumnOptions is not null && Align == Align.Right)
                {
                    <FluentButton Appearance="Appearance.Stealth" class="col-options-button" @onclick="@(() => Grid.ShowColumnOptions(this))">
                        <FluentIcon Name="@FluentIcons.Filter" Size="IconSize.Size16" Filled=false />
                    </FluentButton>
                }
            }
            else
            {
                <div class="col-title">
                    @if (ColumnOptions is not null && Align != Align.Right)
                    {
                        <FluentButton Appearance="Appearance.Stealth" class="col-options-button" @onclick="@(() => Grid.ShowColumnOptions(this))">
                            <FluentIcon Name="@FluentIcons.Filter" Size="IconSize.Size16" Filled=false />
                        </FluentButton>
                    }
                    <div class="col-title-text">@Title</div>
                    @if (ColumnOptions is not null && Align == Align.Right)
                    {
                        <FluentButton Appearance="Appearance.Stealth" class="col-options-button" @onclick="@(() => Grid.ShowColumnOptions(this))">
                            <FluentIcon Name="@FluentIcons.Filter" Size="IconSize.Size16" Filled=false />
                        </FluentButton>
                    }
                </div>
            }
            @if (ColumnOptions is null)
            {
                RenderFilterPart(__builder);
            }
        }
    }

    internal void RenderPlaceholderContent(RenderTreeBuilder __builder, PlaceholderContext placeholderContext)
    {
        // Blank if no placeholder template was supplied, as it's enough to style with CSS by default
        if (PlaceholderTemplate is not null)
        {
            @PlaceholderTemplate(placeholderContext)
        }
    }

    internal void RenderFilterPart(RenderTreeBuilder __builder)
    {
        if (Filterable.HasValue && Filterable.Value && IsFilterableByDefault())
        {
            var filterableThis = this.GetType().GetInterfaces().Where(w => w.Name.StartsWith("IFilterableColumn")).OrderBy(o => o.GenericTypeArguments.Count()).Last();
            var propertyType = filterableThis.GenericTypeArguments.Last();
            var filterComponent = typeof(DataGridFilterColumnHeader<,>).MakeGenericType(new[] { typeof(TGridItem), propertyType });
            <CascadingValue Value="this" IsFixed=true>
                <DynamicComponent Type=filterComponent @ref=filterComponentHolder></DynamicComponent>
            </CascadingValue>
        }
    }
}
