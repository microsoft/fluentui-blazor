@namespace Microsoft.FluentUI.AspNetCore.Components
@inherits FluentComponentBase

<div id="@Id" class="@ClassValue" style="@StyleValue" @attributes="AdditionalAttributes">
    @if (DialogService != null)
    {
        @foreach (var dialog in DialogService.Items.Values.OrderBy(i => i.Index))
        {
            if (dialog.ComponentType == typeof(Microsoft.AspNetCore.Components.Forms.InputFile))
            {
                var anchorId = dialog.Options?.Parameters["ElementId"] as string;
                var options = dialog.Options?.Parameters["Options"] as InputFileOptions ?? new InputFileOptions();
                var onCompleted = dialog.Options?.Parameters["OnCompletedAsync"] as Func<IEnumerable<FluentInputFileEventArgs>, Task>;
                var onFileUploaded = dialog.Options?.Parameters["OnFileUploadedAsync"] as Func<FluentInputFileEventArgs, Task>;
                var onProgressChange = dialog.Options?.Parameters["OnProgressChangeAsync"] as Func<FluentInputFileEventArgs, Task>;
                var onFileError = dialog.Options?.Parameters["OnFileErrorAsync"] as Func<FluentInputFileErrorEventArgs, Task>;

                if (!string.IsNullOrEmpty(anchorId))
                {
                    <FluentInputFile Id="@dialog.Id"
                                     DragDropZoneVisible="false"
                                     AnchorId="@anchorId"
                                     OnCompleted="@(e => onCompleted is null ? Task.CompletedTask : onCompleted.Invoke(e))"
                                     Accept="@options.Accept"
                                     Multiple="@options.Multiple"
                                     MaximumFileCount="@options.MaximumFileCount"
                                     MaximumFileSize="@options.MaximumFileSize"
                                     BufferSize="@options.BufferSize"
                                     Mode="@options.Mode"
                                     OnFileUploaded="@(e => onFileUploaded is null ? Task.CompletedTask : onFileUploaded.Invoke(e))"
                                     OnProgressChange="@(e => onProgressChange is null ? Task.CompletedTask : onProgressChange.Invoke(e))"
                                     OnFileError="@(e => onFileError is null ? Task.CompletedTask : onFileError.Invoke(e))" />
                }
            }
            else
            {
                <FluentDialog Id="@dialog.Id"
                              Class="@dialog.Options?.ClassValue"
                              Style="@dialog.Options?.StyleValue"
                              Data="@dialog.Options?.Data"
                              Instance="@dialog"
                              OnStateChange="@(dialog.Options?.OnStateChange ?? EmptyOnStateChange)"
                              @attributes="@AdditionalAttributes" />
            }
        }
    }
</div>
