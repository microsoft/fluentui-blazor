@namespace Microsoft.Fast.Components.FluentUI
@inherits FluentComponentBase

<CascadingValue Value="this" IsFixed="true">
    <fluent-dialog @ref="Element"
                   id="@Id"
                   class="@ClassValue"
                   style="@StyleValue"
                   modal="@((Modal ?? _parameters.Modal).ToString()?.ToLower())"
                   hidden="@Hidden"
                   trap-focus="@((TrapFocus ?? _parameters.TrapFocus).ToString()?.ToLower())"
                   aria-describedby=@(_parameters.AriaDescribedby ?? AriaDescribedby)
                   aria-labelledby=@(_parameters.AriaLabelledby ?? AriaLabelledby)
                   aria-label=@(_parameters.AriaLabel ?? AriaLabel)
                   @attributes=@AdditionalAttributes>
        <FluentStack Orientation="Orientation.Vertical" Class="fluent-dialog-content" Style="height:100%;">
            @if (HeaderTemplate is not null)
            {
                @HeaderTemplate
            }
            else if (_parameters.ShowTitle && (_parameters.Title != null || _parameters.ShowDismiss))
            {
                <FluentDialogHeader Title="@_parameters.Title" ShowDismiss="@_parameters.ShowDismiss" />
            }

            <div class="fluent-dialog-body" nofooter="@(!HasButtons)" style="@(_parameters.DialogBodyStyle ?? null)">
                @if (Instance is null)
                {
                    @ChildContent
                }
                else
                {
                    <DynamicComponent Type="@Instance.ContentType" Parameters="Instance.GetParameterDictionary()" />
                }
            </div>
            @if (FooterTemplate is not null)
            {
                @FooterTemplate
            }
            else if (HasButtons)
            {
                 <FluentDialogFooter Alignment="@_parameters.Alignment"
                                    PrimaryAction="@_parameters.PrimaryAction"
                                    PrimaryActionEnabled="@_parameters.PrimaryActionEnabled"
                                    SecondaryAction="@_parameters.SecondaryAction"
                                    SecondaryActionEnabled="@_parameters.SecondaryActionEnabled"/>
               
            }
        </FluentStack>
    </fluent-dialog>
</CascadingValue>