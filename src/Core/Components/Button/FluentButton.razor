@namespace Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Rendering;
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@inherits FluentComponentBase

<AddTag Name="span" TagWhen="@(() => LoadingOverlay)" class="@ClassValue" style="@StyleValue">
    <fluent-button class="@(LoadingOverlay ? null : ClassValue)"
                   style="@(LoadingOverlay ? null : StyleValue)"
                   autofocus="@AutoFocus"
                   form="@FormId"
                   formaction="@FormAction"
                   formenctype="@FormEncType"
                   formmethod="@FormMethod"
                   formnovalidate="@FormNoValidate"
                   formtarget="@FormTarget"
                   type="@Type.ToAttributeValue()"
                   shape="@Shape.ToAttributeValue()"
                   size="@Size.ToAttributeValue()"
                   id="@Id"
                   value="@Value"
                   icon-only="@(IconOnly || (ChildContent is null && Label is null))"
                   disabled="@(Disabled || Loading)"
                   disabled-focusable="@(DisabledFocusable || Loading)"
                   name="@Name"
                   required="@Required"
                   aria-label="@Title"
                   title="@Title"
                   appearance="@(Appearance == ButtonAppearance.Default ? null : Appearance.ToAttributeValue())"
                   @onclick="@OnClickHandlerAsync"
                   @onclick:stopPropagation="@StopPropagation"
                   @attributes="@AdditionalAttributes">
        @if (IconStart != null)
        {
            if (Loading)
            {
                <fluent-spinner size="tiny" slot="@((ChildContent is not null || Label is not null) ? "start" : null)" style="@RingStyle(IconStart)" />
            }
            else
            {
                @if (IconStart != null)
                {
                    <FluentIcon Value="@IconStart" Slot="@((ChildContent is null && Label is null) ? null : "start")" />
                }
            }
        }
        @Label
        @ChildContent
        @if (IconEnd != null)
        {
            if (Loading && IconStart == null)
            {
                <fluent-spinner size="tiny" slot="@((ChildContent is not null || Label is not null) ? "end" : null)" style="@RingStyle(IconEnd)" />
            }
            else
            {
                @if (IconEnd != null)
                {
                    <FluentIcon Value="@IconEnd" Slot="@((ChildContent is null && Label is null) ? null : "end")" />
                }
            }
        }
    </fluent-button>
    @if (LoadingOverlay)
    {
        <fluent-spinner size="tiny" />
    }
</AddTag>
