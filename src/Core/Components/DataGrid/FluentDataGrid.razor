@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.FluentUI.AspNetCore.Components.DataGrid.Infrastructure
@namespace Microsoft.FluentUI.AspNetCore.Components
@inherits FluentComponentBase
@typeparam TGridItem
<CascadingValue TValue="InternalGridContext<TGridItem>" IsFixed="true" Value="@_internalGridContext">
    @{
        StartCollectingColumns();
    }
    @if (!_manualGrid)
    {
        @ChildContent
    }
    <Defer>
        @{
            FinishCollectingColumns();
        }
        <ColumnsCollectedNotifier TGridItem="TGridItem" />

        <fluent-data-grid @ref=_gridReference
                          no-tabbing=@NoTabbing
                          generate-header="none"
                          grid-template-columns=@GridTemplateColumns
                          class="@GridClass()"
                          style="@Style"
                          aria-rowcount="@(_ariaBodyRowCount + 1)"
                          @onrowfocus=HandleOnRowFocus
                          @onclosecolumnoptions="CloseColumnOptions"
                          @attributes="AdditionalAttributes">
            @if (GenerateHeader != GenerateHeaderOption.None)
            {
                DataGridRowType headerType = DataGridRowType.Header;
                if (GenerateHeader == GenerateHeaderOption.Sticky)
                    headerType = DataGridRowType.StickyHeader;
                <FluentDataGridRow RowType=@headerType TGridItem=TGridItem>
                    @_renderColumnHeaders
                </FluentDataGridRow>
            }

            @if (_ariaBodyRowCount == 0 && !_manualGrid)
            {
                <div class="empty-content-row" role="row">
                    <div class="empty-content-cell" role="gridcell">
                        @if (EmptyContent is null)
                        {
                            @("No data to show!")
                            ;
                        }
                        else
                        {
                            @EmptyContent
                        }
                    </div>
                </div>
            }
            else
            {
                @if (Virtualize)
                {
                    <Virtualize @ref="@_virtualizeComponent"
                                TItem="(int RowIndex, TGridItem Data)"
                                ItemSize="@ItemSize"
                                ItemsProvider="@ProvideVirtualizedItems"
                                ItemContent="@(item => builder => RenderRow(builder, item.RowIndex, item.Data))"
                                Placeholder="@(placeholderContext => builder => RenderPlaceholderRow(builder, placeholderContext))" />
                }
                else
                {
                    @_renderNonVirtualizedRows
                }
            }
            @if (_manualGrid)
            {
                @ChildContent
            }
        </fluent-data-grid>
    </Defer>
</CascadingValue>

@code {
    private void RenderNonVirtualizedRows(RenderTreeBuilder __builder)
    {
        var initialRowIndex = (GenerateHeader != GenerateHeaderOption.None) ? 2 : 1; // aria-rowindex is 1-based, plus 1 if there is a header
        var rowIndex = initialRowIndex;
        foreach (var item in _currentNonVirtualizedViewItems)
        {
            RenderRow(__builder, rowIndex++, item);
        }
    }

    private void RenderRow(RenderTreeBuilder __builder, int rowIndex, TGridItem item)
    {
        var rowClass = RowClass?.Invoke(item) ?? null;
        var rowStyle = RowStyle?.Invoke(item) ?? null;

        <FluentDataGridRow @key="@(ItemKey(item))" GridTemplateColumns=@GridTemplateColumns aria-rowindex="@rowIndex" Class="@rowClass" Style="@rowStyle" TGridItem="TGridItem" Item="@item">
            @for (var colIndex = 0; colIndex < _columns.Count; colIndex++)
            {
                var col = _columns[colIndex];

                string? tooltip = col.Tooltip ? @col.RawCellContent(item) : null;

                <FluentDataGridCell GridColumn=@(colIndex+1) Class="@ColumnClass(col)" Style="@col.Style" @key="@col" TGridItem="TGridItem" Item="@item" title="@tooltip" aria-label="@tooltip">
                    @((RenderFragment)(__builder => col.CellContent(__builder, item)))
                </FluentDataGridCell>
            }
        </FluentDataGridRow>
    }

    private void RenderPlaceholderRow(RenderTreeBuilder __builder, PlaceholderContext placeholderContext)
    {
        string? _rowsDataSize = $"height: {ItemSize}px";

        <FluentDataGridRow GridTemplateColumns=@GridTemplateColumns aria-rowindex="@(placeholderContext.Index + 1)" Style="@_rowsDataSize" TGridItem="TGridItem">
            @for (var colIndex = 0; colIndex < _columns.Count; colIndex++)
            {
                var col = _columns[colIndex];

                <FluentDataGridCell Class="@("grid-cell-placeholder " + @ColumnClass(col))" Style="@col.Style" @key="@col" GridColumn=@(colIndex+1) TGridItem="TGridItem">
                    @((RenderFragment)(__builder => col.RenderPlaceholderContent(__builder, placeholderContext)))
                </FluentDataGridCell>
            }
        </FluentDataGridRow>
    }


    private void RenderColumnHeaders(RenderTreeBuilder __builder)
    {
        @for (var colIndex = 0; colIndex < _columns.Count; colIndex++)
        {
            var col = _columns[colIndex];
            string CellId = Identifier.NewId();
            if (_sortByColumn == col)
                col.ShowSortIcon = true;
            else
                col.ShowSortIcon = false;

            <FluentDataGridCell GridColumn=@(colIndex+1) CellType=DataGridCellType.ColumnHeader Class="@("column-header " + @ColumnHeaderClass(col))" Style="@col.Style" aria-sort="@AriaSortValue(col)" @key="@col" scope="col" TGridItem="TGridItem">
                @col.HeaderContent
                @if (col == _displayOptionsForColumn)
                {
                    <div class="col-options">@col.ColumnOptions</div>
                }
                @if (ResizableColumns)
                {
                    <FluentDivider class="col-width-draghandle" Orientation="Orientation.Vertical" Role="DividerRole.Separator" />
                }
            </FluentDataGridCell>
        }
    }
}
