@namespace Microsoft.Fast.Components.FluentUI
@inherits FluentComponentBase
@if (ChildContent == null || IsVisible)
{
    @* Default *@

    @if (Type == MessageType.MessageBar)
    {
        <div class="@ClassValue" style="@StyleValue">

            @* Icon *@
                <div class="fluent-messagebar-icon">
                    <FluentIcon Value="@Icon" Title="@(Content?.Intent.ToAttributeValue())" Color="@_color" />
                </div>
            
            @* Message *@
            <div class="fluent-messagebar-message">
                <span class="title">@((MarkupString)Title)</span>
                @if (ChildContent is not null)
                {
                    @ChildContent
                }
                else
                {
                    @((MarkupString)Content!.Body!)
                }
                @if (Link is not null)
                {
                    <FluentAnchor Href="@(String.IsNullOrEmpty(Link?.Href) ? "#" : Link?.Href)"
                                  Appearance="Appearance.Hypertext"
                                  Target="_blank"
                                  @onclick="@LinkClickedAsync"
                                  title="Link">
                        @Link?.Text
                    </FluentAnchor>
                }
                
                @if (ShowPrimaryAction)
                {
                    <FluentAnchor Href="@(String.IsNullOrEmpty(PrimaryAction?.Href) ? "#" : PrimaryAction?.Href)"
                                  @onclick="@PrimaryActionClickedAsync"
                                  title="Alert action"
                                  Class="fluent-messagebar-action"
                                  Target="_blank">
                        @PrimaryAction?.Text
                    </FluentAnchor>
                }
                @if (ShowSecondaryAction)
                {
                    <FluentAnchor Href="@(String.IsNullOrEmpty(SecondaryAction?.Href) ? "#" : SecondaryAction?.Href)"
                    @onclick="@SecondaryActionClickedAsync"
                                  title="Alert action"
                                  Class="fluent-messagebar-action"
                                  Target="_blank">
                        @SecondaryAction?.Text
                    </FluentAnchor>
                }
            </div>

            @* Close *@
            
                <FluentIcon Icon="CoreIcons.Regular.Size16.Dismiss"
                            Color=@Color.Neutral
                            Class="fluent-messagebar-close"
                            OnClick="DismissClicked" />
            
        </div>
    }

    @* Notification *@
    @if (Type == MessageType.Notification)
    {
        <div class="@ClassValue" style="@StyleValue">

            @* Icon *@
                <div class="fluent-messagebar-notification-icon">
                <FluentIcon Value="@Icon"
                            
                            Color="@_color"
                            Title="@(Content?.Intent?.ToAttributeValue())" />
                </div>

            @* Message *@
            <div class="fluent-messagebar-notification-message" title="@Content">
                @((MarkupString)Title)
            </div>

            @* Close *@
            
                <div class="fluent-messagebar-notification-close">
                <FluentIcon Icon="CoreIcons.Regular.Size16.Dismiss"
                            Color=@Color.Neutral
                            Class="fluent-messagebar-notification-close"
                            OnClick="DismissClicked" />
                </div>
            

            @* Detailled content *@
            <div class="fluent-messagebar-notification-content">
                @ChildContent
                @if (!String.IsNullOrEmpty(Content?.Body))
                {
                    @((MarkupString)Content.Body)
                }
                @if (Link is not null)
                {
                    <FluentAnchor Href="@(String.IsNullOrEmpty(Link?.Href) ? "#" : Link?.Href)"
                                  Appearance="Appearance.Hypertext"
                                  Target="_blank"
                                  @onclick="@LinkClickedAsync"
                                  title="Link">
                        @Link?.Text
                    </FluentAnchor>
                }
                @if (ShowPrimaryAction)
                {
                    <FluentAnchor Href="@(String.IsNullOrEmpty(PrimaryAction?.Href) ? "#" : PrimaryAction?.Href)"
                                  Appearance="Appearance.Hypertext"
                                  @onclick="@PrimaryActionClickedAsync"
                                  title="Notification action"
                                  Class="fluent-messagebar-action"
                                  Target="_blank">
                        @PrimaryAction?.Text
                    </FluentAnchor>
                }
                
            </div>

            @* Recorded time *@
            @if (Timestamp != null)
            {
                <div class="fluent-messagebar-notification-time">
                    @((DateTime.Now - Timestamp)?.ToTimeAgo())
                </div>
            }

        </div>
    }
}