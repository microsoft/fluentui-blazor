using System.Text;
using System.Text.RegularExpressions;

namespace Microsoft.Fast.Components.FluentUI.IconsGenerator;

internal class CodeGenerator
{
    /// <summary>
    /// Initializes a new instance of the <see cref="CodeGenerator"/> class.
    /// </summary>
    /// <param name="configuration"></param>
    public CodeGenerator(Configuration configuration)
    {
        Configuration = configuration;
        Logger = (message) => { };
    }

    /// <summary>
    /// Gets or sets the logger.
    /// </summary>
    public Action<string> Logger { get; init; }

    /// <summary>
    /// Gets the configuration.
    /// </summary>
    private Configuration Configuration { get; }

    /// <summary>
    /// Reads all SVG files in the assets folder.
    /// </summary>
    /// <returns></returns>
    public IEnumerable<Model.Icon> ReadAllAssets()
    {
        const string searchPattern = "*.svg";
        var icons = new Dictionary<string, Model.Icon>();

        Logger.Invoke($"Reading all SVG files in {Configuration.AssetsFolder}.");
        var allFiles = Configuration.AssetsFolder.GetFiles(searchPattern, SearchOption.AllDirectories);

        foreach (var file in allFiles)
        {
            var newIcon = new Model.Icon(file);
            var key = newIcon.Key.ToLower();

            if (!icons.ContainsKey(key))
            {
                icons.Add(newIcon.Key.ToLower(), newIcon);
            }
        }

        return icons.Values
                    .OrderBy(i => i.Name)
                    .ThenBy(i => i.Size)
                    .ThenBy(i => i.Variant)
                    .ToArray();
    }

    public FileInfo GenerateMainIconsClass(IEnumerable<Model.Icon> icons)
    {
        var file = new FileInfo(Path.Combine(Configuration.TargetFolder.FullName, "Icons.cs"));

        Logger.Invoke($"Generating {file.Name}, containing {icons.Count()} icons,");
        Logger.Invoke($"in the target folder {Configuration.TargetFolder.FullName}.");
        var classContent = GenerateMainClass(icons);

        File.WriteAllText(file.FullName, classContent);

        return file;
    }

    /// <summary>
    /// Generates all classes for the given icons.
    /// </summary>
    /// <param name="icons"></param>
    /// <returns></returns>
    public IEnumerable<FileInfo> GenerateClasses(IEnumerable<Model.Icon> icons)
    {
        var generatedFiles = new List<FileInfo>();
        var allSizes = icons.Select(i => i.Size)
                            .Distinct()
                            .OrderBy(i => i);
        var allVariants = icons.Select(i => i.Variant)
                               .Distinct()
                               .OrderBy(i => i);

        // Delete previous files
        foreach (var file in Configuration.TargetFolder.GetFiles("*.*", SearchOption.TopDirectoryOnly))
        {
            bool toDelete = Regex.IsMatch(file.Name, @"^(Filled|Regular)[0-9][0-9](\.cs|Data\.resx)$");
            if (toDelete)
            {
                file.Delete();
            }
        }

        // Generate all classes
        foreach (var variant in allVariants)
        {
            foreach (var size in allSizes)
            {
                // CSharp
                var file = new FileInfo(Path.Combine(Configuration.TargetFolder.FullName, $"{variant}{size}.cs"));
                var iconsForSizeAndVariant = icons.Where(i => i.Size == size && i.Variant == variant).OrderBy(i => i.Name);

                Logger.Invoke($"Generating {file.Name}, containing {iconsForSizeAndVariant.Count()} icons.");
                var classContent = GenerateClass(size, variant, iconsForSizeAndVariant, Configuration.GenerateResx);

                File.WriteAllText(file.FullName, classContent);
                generatedFiles.Add(file);

                // Resx
                if (Configuration.GenerateResx)
                {
                    var resxFile = new FileInfo(Path.Combine(Configuration.TargetFolder.FullName, $"{variant}{size}Data.resx"));
                    Logger.Invoke($"Generating associated {resxFile.Name}.");

                    var resxContent = new ResourceGenerator(size, variant, iconsForSizeAndVariant).GenerateResx();

                    File.WriteAllText(resxFile.FullName, resxContent);
                    generatedFiles.Add(resxFile);
                }

            }
        }

        return generatedFiles;
    }

    /// <summary />
    private string GenerateMainClass(IEnumerable<Model.Icon> icons)
    {
        var builder = new StringBuilder();

        builder.AppendLine("// <auto-generated>");
        builder.AppendLine("//     This code was generated by a tool.");
        builder.AppendLine("//     Changes to this file may cause incorrect behavior and will be lost if");
        builder.AppendLine("//     the code is regenerated.");
        builder.AppendLine("// </auto-generated>");
        builder.AppendLine();
        builder.AppendLine("namespace " + Configuration.Namespace + ";");
        builder.AppendLine();
        builder.AppendLine("/// <summary />");
        builder.AppendLine("[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]");
        builder.AppendLine("public static partial class Icons");
        builder.AppendLine("{");

        // Dictionary
        builder.AppendLine("    /// <summary />");
        builder.AppendLine("    public static IEnumerable<Icon> AllIcons { get; } = new List<Icon>()");
        builder.AppendLine("    {");
        foreach (var icon in icons)
        {
            builder.AppendLine($"        {Configuration.Namespace}.Icons.{icon.Variant}.Size{icon.Size}.{icon.Name},");
        }
        builder.AppendLine("    };");
        builder.AppendLine("}");

        return builder.ToString();
    }

    /// <summary />
    private string GenerateClass(int size, string variant, IEnumerable<Model.Icon> icons, bool isResx)
    {
        var builder = new StringBuilder();

        builder.AppendLine("// <auto-generated>");
        builder.AppendLine("//     This code was generated by a tool.");
        builder.AppendLine("//     Changes to this file may cause incorrect behavior and will be lost if");
        builder.AppendLine("//     the code is regenerated.");
        builder.AppendLine("// </auto-generated>");
        builder.AppendLine();
        builder.AppendLine("#pragma warning disable 1591");
        builder.AppendLine("namespace " + Configuration.Namespace + ";");
        builder.AppendLine();
        builder.AppendLine("public static partial class Icons");
        builder.AppendLine("{");
        builder.AppendLine("    public static partial class " + variant);
        builder.AppendLine("    {");
        builder.AppendLine("        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]");
        builder.AppendLine("        public static partial class Size" + size);
        builder.AppendLine("        {");

        // Resource Manager
        if (isResx)
        {
            var className = $"{variant}{size}Data";

            builder.AppendLine($"            private static System.Resources.ResourceManager _resourceMananager;");
            builder.AppendLine();
            builder.AppendLine($"            /// <summary>");
            builder.AppendLine($"            /// Returns the cached ResourceManager instance used by this class.");
            builder.AppendLine($"            /// </summary>");
            builder.AppendLine($"            [System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]");
            builder.AppendLine($"            internal static System.Resources.ResourceManager ResourceManager");
            builder.AppendLine($"            {{");
            builder.AppendLine($"                get");
            builder.AppendLine($"                {{");
            builder.AppendLine($"                    if (_resourceMananager == null)");
            builder.AppendLine($"                    {{");
            builder.AppendLine($"                        _resourceMananager = new System.Resources.ResourceManager(\"{Configuration.Namespace}.Icons.Assets.{className}\", typeof(Icons).Assembly);");
            builder.AppendLine($"                    }}");
            builder.AppendLine();
            builder.AppendLine($"                    return _resourceMananager;");
            builder.AppendLine($"                }}");
            builder.AppendLine($"            }}");
            builder.AppendLine();
        }

        // Properties
        foreach (var icon in icons)
        {
            if (isResx)
            {
                builder.AppendLine($"            public static Icon {icon.Name} {{ get; }} = new Icon(\"{icon.Name}\", IconVariant.{variant}, IconSize.Size{size}, ResourceManager.GetString(\"{icon.Name}\"));");

            }
            else
            {
                var svgContent = icon.GetContent(removeSvgRoot: true)
                                     .Replace("\"", "\\\"");

                builder.AppendLine($"            public static Icon {icon.Name} {{ get; }} = new Icon(\"{icon.Name}\", IconVariant.{variant}, IconSize.Size{size}, \"{svgContent}\");");

            }
        }



        builder.AppendLine("        }");
        builder.AppendLine("    }");
        builder.AppendLine("}");
        builder.AppendLine("#pragma enable disable 1591");

        return builder.ToString();
    }
}
