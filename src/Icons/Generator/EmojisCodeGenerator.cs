using System.Text;
using System.Text.RegularExpressions;
using Microsoft.Fast.Components.FluentUI.IconsGenerator.Model;

namespace Microsoft.Fast.Components.FluentUI.IconsGenerator;

internal class EmojisCodeGenerator
{
    /// <summary>
    /// Initializes a new instance of the <see cref="EmojisCodeGenerator"/> class.
    /// </summary>
    /// <param name="configuration"></param>
    public EmojisCodeGenerator(Configuration configuration)
    {
        Configuration = configuration;
        Logger = (message) => { };
    }

    /// <summary>
    /// Gets or sets the logger.
    /// </summary>
    public Action<string> Logger { get; init; }

    /// <summary>
    /// Gets the configuration.
    /// </summary>
    private Configuration Configuration { get; }

    /// <summary>
    /// Reads all SVG files in the assets folder.
    /// </summary>
    /// <returns></returns>
    public IEnumerable<Model.EmojiFileData> ReadAllAssets()
    {
        const string searchPattern = "metadata.json";
        var emojis = new List<Model.Emoji>();

        Logger.Invoke($"Reading all metadata.json files in {Configuration.AssetsFolder}.");
        var allFiles = Configuration.AssetsFolder.GetFiles(searchPattern, SearchOption.AllDirectories);

        foreach (var file in allFiles)
        {
            var newEmoji = new Model.Emoji(file);
            var key = newEmoji.Key.ToLower();

            emojis.Add(newEmoji);
        }

        return emojis.SelectMany(i => i.Files);
    }

    /// <summary>
    /// Generates all classes for the given emojis.
    /// </summary>
    /// <param name="emojis"></param>
    /// <returns></returns>
    public IEnumerable<FileInfo> GenerateClasses(IEnumerable<Model.EmojiFileData> emojis)
    {
        var generatedFiles = new List<FileInfo>();
        var allGroups = emojis.Select(i => i.Emoji.Group)
                              .Distinct()
                              .OrderBy(i => i);

        // Delete previous files
        foreach (var file in Configuration.TargetFolder.GetFiles("*.cs", SearchOption.TopDirectoryOnly))
        {
            file.Delete();
        }

        // Generate all classes
        foreach (var group in allGroups)
        {
            // CSharp
            var file = new FileInfo(Path.Combine(Configuration.TargetFolder.FullName, $"{group}.cs"));
            var emojisForGroup = emojis.Where(i => i.Emoji.Group == group).OrderBy(i => i.Emoji.Name);

            Logger.Invoke($"Generating {file.Name}, containing {emojisForGroup.Count()} emojis.");
            var classContent = GenerateClass(group, emojisForGroup);

            File.WriteAllText(file.FullName, classContent);
            generatedFiles.Add(file);
        }

        return generatedFiles;
    }

    /// <summary />
    private string GenerateClass(string group, IEnumerable<Model.EmojiFileData> emojis)
    {
        var builder = new StringBuilder();
        var emojisGroup = emojis.Where(i => String.Compare(i.Emoji.Group, group, StringComparison.InvariantCultureIgnoreCase) == 0);
        var skintones = emojisGroup.Select(file => file.SkinTone)
                                   .Distinct()
                                   .OrderBy(i => i);
        var styles = emojisGroup.Select(file => file.Style)
                                .Distinct()
                                .OrderBy(i => i);

        builder.AppendLine("// <auto-generated>");
        builder.AppendLine("//     This code was generated by a tool.");
        builder.AppendLine("//     Changes to this file may cause incorrect behavior and will be lost if");
        builder.AppendLine("//     the code is regenerated.");
        builder.AppendLine("// </auto-generated>");
        builder.AppendLine();
        builder.AppendLine("#pragma warning disable 1591");
        builder.AppendLine();
        builder.AppendLine("namespace " + Configuration.Namespace + ";");
        builder.AppendLine();
        builder.AppendLine("public static partial class Emojis");
        builder.AppendLine("{");
        builder.AppendLine("    public static partial class " + group);
        builder.AppendLine("    {");

        foreach (var style in styles)
        {
            builder.AppendLine("        public static partial class " + style);
            builder.AppendLine("        {");

            foreach (var skintone in skintones)
            {
                builder.AppendLine("            public static partial class " + skintone);
                builder.AppendLine("            {");

                foreach (var file in emojisGroup.Where(i => i.Style == style && i.SkinTone == skintone))
                {
                    AddProperties(builder, file);
                }

                builder.AppendLine("            }");
            }

            builder.AppendLine("        }");
        }

        builder.AppendLine("    }");
        builder.AppendLine("}");
        builder.AppendLine();
        builder.AppendLine("#pragma warning restore 1591");

        return builder.ToString();
    }

    private void AddProperties(StringBuilder builder, EmojiFileData file, int indentation = 16)
    {
        string indentationString = new string(' ', indentation);

        var content = file.GetContent(removeSvgRoot: true);
        var size = content.Size.Width;
        var svgContent = content.Content.Replace("\"", "\\\"");
        var group = Tools.ToPascalCase(file.Emoji.Meta.Group, "_");

        builder.AppendLine($"{indentationString}public class {file.Emoji.Name} : Emoji {{ public {file.Emoji.Name}() : base(\"{file.Emoji.Name}\", EmojiSize.Size{size}, EmojiGroup.{group}, EmojiSkintone.{file.SkinTone}, EmojiStyle.{file.Style}, \"{svgContent}\") {{ }} }}");
    }
}
