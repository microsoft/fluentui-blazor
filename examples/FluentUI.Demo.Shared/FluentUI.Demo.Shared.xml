<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentUI.Demo.Shared</name>
    </assembly>
    <members>
        <member name="T:FluentUI.Demo.Shared.Components.ApiDocumentation">
            <summary />
        </member>
        <member name="P:FluentUI.Demo.Shared.Components.ApiDocumentation.Component">
            <summary>
            The Component for which the Parameters, Methods and Events should be displayed
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Components.ApiDocumentation.InstanceType">
            <summary>
            It Component is a generic type, a generic type argument needs to be provided
            so an instance of the type can be created. 
            This is needed to get and display any default values
            Default for this parameter is 'typeof(string)'
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Components.ApiDocumentation.GenericLabel">
            <summary>
            The label used for displaying the type parameter
            </summary>
        </member>
        <member name="T:FluentUI.Demo.Shared.Components.CodeSnippet">
            <summary />
        </member>
        <member name="P:FluentUI.Demo.Shared.Components.DemoSection.Component">
            <summary>
            The component for wich the example will be shown. Enter the name only. '.razor' will be added internally
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Components.DemoSection.ComponentParameters">
            <summary>
             Any parameters that need to be supplied to the component
             </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Components.DemoSection.CollocatedFiles">
            <summary>
            Any collocated (isolated) .cs, .css or .js files. Enter the extensions only
            Example: @(new[] { "css", "js" })
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Components.DemoSection.ShowDownloads">
            <summary>
            Show download links for the example sources
            Default = true
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Components.DemoSection.HideExample">
            <summary>
            Hide the 'Example' tab
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Components.TableOfContents.Heading">
            <summary>
            Gets or sets the heading for the ToC 
            Defaults to 'In this article'
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Components.TableOfContents.ShowBackButton">
            <summary>
            Gets or sets if a 'Back to top' button should be rendered.
            Defaults to true
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Components.TableOfContents.ChildContent">
            <summary>
            Gets or sets the content to be rendered inside the component.
            </summary>
        </member>
        <member name="M:FluentUI.Demo.Shared.Pages.ComponentBindings.#ctor">
            <summary>
            Within this constructor you can set default values for the form fields through the FormModel
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.BodyContent.ChildContent">
            <summary>
            Gets or sets the content to be rendered inside the component.
            </summary>
        </member>
        <member name="T:FluentUI.Demo.Shared.CounterBadge">
            <summary />
        </member>
        <member name="P:FluentUI.Demo.Shared.CounterBadge.ClassValue">
            <summary />
        </member>
        <member name="P:FluentUI.Demo.Shared.CounterBadge.StyleValue">
            <summary />
        </member>
        <member name="P:FluentUI.Demo.Shared.CounterBadge.ChildContent">
            <summary>
            Child content of component, the content that the badge will apply to.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.CounterBadge.Count">
            <summary>
            Number displayed inside the badge.
            Can be enriched with a plus sign with <see cref="P:FluentUI.Demo.Shared.CounterBadge.ShowOverflow"/>
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.CounterBadge.BadgeContent">
            <summary>
            Content you want inside the badge, to customize the badge content.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.CounterBadge.Max">
            <summary>
            Max number that can be displayed inside the badge.
            Default is 99.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.CounterBadge.HorizontalPosition">
            <summary>
            Left position of the badge in percentage.
            By default, this value is 50 to center the badge.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.CounterBadge.BottomPosition">
            <summary>
            Bottom position of the badge in percentage.
            By default, this value is 50 to center the badge.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.CounterBadge.Appearance">
            <summary>
            Default design of this badge using colors from theme.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.CounterBadge.BackgroundColor">
            <summary>
            Background color to replace the color inferred from property.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.CounterBadge.Color">
            <summary>
            Font color to replace the color inferred from property.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.CounterBadge.ShowZero">
             <summary>
             If the counter badge should be displayed when the count is zero.
             Defaults to false.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.CounterBadge.ShowOverflow">
             <summary>
             If an plus sign should be displayed when the <see cref="P:FluentUI.Demo.Shared.CounterBadge.Count"/> is greater than <see cref="P:FluentUI.Demo.Shared.CounterBadge.Max"/>.
             Defaults to true.
            </summary>
        </member>
        <member name="M:FluentUI.Demo.Shared.CounterBadge.GetBackgroundColor">
            <summary />
        </member>
        <member name="M:FluentUI.Demo.Shared.CounterBadge.GetBorderColor">
            <summary />
        </member>
        <member name="M:FluentUI.Demo.Shared.CounterBadge.GetFontColor">
            <summary />
        </member>
        <member name="P:FluentUI.Demo.Shared.Footer.ChildContent">
            <summary>
            Gets or sets the content to be rendered inside the component.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Header.Height">
            <summary>
            Gets or sets the height of the header (in pixels).
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Header.ChildContent">
            <summary>
            Gets or sets the content to be rendered inside the component.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Layout.ChildContent">
            <summary>
            Gets or sets the content to be rendered inside the component.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.MainLayout.Header">
            <summary>
            Gets or sets the header content.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.MainLayout.SubHeader">
            <summary>
            Gets or sets the subheader content.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.MainLayout.HeaderHeight">
            <summary>
            Gets or sets the height of the header (in pixels).
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.MainLayout.NavMenuTitle">
            <summary>
            Gets or set the tite of the navigation menu
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.MainLayout.NavMenuContent">
            <summary>
            Gets or sets the content of the navigation menu
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.MainLayout.Body">
            <summary>
            Gets or sets the content of the body
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenu.Title">
            <summary>
            Gets or sets the title of the navigation menu
            Default to "Navigation menu"
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenu.Width">
            <summary>
            Gets or sets the width of the menu (in pixels).
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenu.Collapsible">
            <summary>
            Gets or sets whether the menu can be collapsed.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenu.Collapsed">
            <summary>
            Gets or sets whether the menu is collapsed.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenu.ChildContent">
            <summary>
            Gets or sets the content to be rendered inside the component.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuGroup.Disabled">
            <summary>
            Gets or sets whether the menu group is disabled
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuGroup.Selected">
            <summary>
            Gets or sets whether the menu group is selected
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuGroup.Expanded">
            <summary>
            Gets or sets whether the menu group is expanded
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuGroup.OnExpandedChanged">
            <summary>
            Callback function for when the menu group is expanded
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuGroup.Width">
            <summary>
            Gets or sets the width of the menu group
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuGroup.Text">
            <summary>
            Gets or sets the text of the menu group
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuGroup.OnClick">
            <summary>
            Callback function for when the menu group is clicked
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuGroup.ChildContent">
            <summary>
            Gets or sets the content to be rendered inside the component.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuLink.Disabled">
            <summary>
            Gets or sets whether the link is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuLink.Selected">
            <summary>
            Gets or sets whether the link is selected.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuLink.SelectedChanged">
            <summary>
            Callback function for when the selected state changes.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuLink.Icon">
            <summary>
            Gets or sets the name of the icon to display with the link
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuLink.Width">
            <summary>
            Gets or sets the width of the link (in pixels).
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuLink.Text">
            <summary>
            Gets or sets the text of the link.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuLink.Href">
            <summary>
            Gets or sets the destination of the link.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuLink.Target">
            <summary>
            Gets orsets the target of the link.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuLink.OnClick">
            <summary>
            Callback function for when the link is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.NavMenuLink.ChildContent">
            <summary>
            Gets or sets the content to be rendered inside the component.
            </summary>
        </member>
        <member name="T:FluentUI.Demo.Shared.BadgeSize">
            <summary>
            Sizes for presence badge
            </summary>
        </member>
        <member name="T:FluentUI.Demo.Shared.PresenceBadge">
            <summary>
            A presence badge is a badge that displays a status indicator such as available, away, or busy.
            </summary>  
        </member>
        <member name="P:FluentUI.Demo.Shared.PresenceBadge.ClassValue">
            <summary />
        </member>
        <member name="P:FluentUI.Demo.Shared.PresenceBadge.StyleValue">
            <summary />
        </member>
        <member name="P:FluentUI.Demo.Shared.PresenceBadge.ChildContent">
            <summary>
            Child content of component, the content that the badge will be applied to.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.PresenceBadge.Status">
            <summary>
            The status to show. See <see cref="T:Microsoft.Fast.Components.FluentUI.PresenceStatus"/> for options.
            Default is Available
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.PresenceBadge.HorizontalPosition">
            <summary>
            Left position of the badge (percentage as number).
            Default value is 50.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.PresenceBadge.BottomPosition">
            <summary>
            Bottom position of the badge (percentage as number).
            Default value is -10.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.PresenceBadge.OutOfOffice">
            <summary>
            Modifies the display to indicate that the user is out of office. 
            This can be combined with any status to display an out-of-office version of that status.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.PresenceBadge.Size">
            <summary>
            Gets or sets the <see cref="T:FluentUI.Demo.Shared.BadgeSize"/> to use.
            Default is Small.
            </summary>
        </member>
        <member name="T:FluentUI.Demo.Shared.Spacer">
            <summary />
        </member>
        <member name="P:FluentUI.Demo.Shared.Spacer.Width">
            <summary>
            Gets or sets the width of the spacer (in pixels)
            </summary>
        </member>
        <member name="T:FluentUI.Demo.Shared.StackHorizontalAlignment">
            <summary>
            Determines the horizontal alignment of the content within the <see cref="T:FluentUI.Demo.Shared.Stack"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Demo.Shared.StackHorizontalAlignment.Left">
            <summary>
            The content is aligned to the left.
            </summary>
        </member>
        <member name="F:FluentUI.Demo.Shared.StackHorizontalAlignment.Center">
            <summary>
            The content is center aligned.
            </summary>
        </member>
        <member name="F:FluentUI.Demo.Shared.StackHorizontalAlignment.Right">
            <summary>
            The content is aligned to the right.
            </summary>
        </member>
        <member name="T:FluentUI.Demo.Shared.StackVerticalAlignment">
            <summary>
            Determines the vertical alignment of the content within the <see cref="T:FluentUI.Demo.Shared.Stack"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Demo.Shared.StackVerticalAlignment.Top">
            <summary>
            The content is aligned to the top.
            </summary>
        </member>
        <member name="F:FluentUI.Demo.Shared.StackVerticalAlignment.Center">
            <summary>
            The content is center aligned.
            </summary>
        </member>
        <member name="F:FluentUI.Demo.Shared.StackVerticalAlignment.Bottom">
            <summary>
            The content is aligned to the bottom
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Stack.HorizontalAlignment">
            <summary>
            The horizontal alignment of the components in the stack. 
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Stack.VerticalAlignment">
            <summary>
            The vertical alignment of the components in the stack.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Stack.Orientation">
            <summary>
            Gets or set the orientation of the stacked components. 
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Stack.Width">
            <summary>
            The width of the stack as a percentage string (default = 100%).
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Stack.Wrap">
            <summary>
            Gets or sets if the stack wraps.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Stack.HorizontalGap">
            <summary>
            Gets or sets the gap between horizontally stacked components (in pixels).
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Stack.VerticalGap">
            <summary>
            Gets or sets the gap between vertically stacked components (in pixels).
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.Stack.ChildContent">
            <summary>
            Gets or sets the content to be rendered inside the component.
            </summary>
        </member>
        <member name="T:FluentUI.Demo.Shared.ReflectionExtensions">
            <summary>
            Reflection extension methods with supporting properties.
            </summary>
        </member>
        <member name="P:FluentUI.Demo.Shared.ReflectionExtensions.KnownTypeNames">
            <summary>
            A dictionary containing a mapping of type to type names.
            </summary>
        </member>
        <member name="M:FluentUI.Demo.Shared.ReflectionExtensions.CreateKnownTypeNamesDictionary">
            <summary>
            Create a dictionary of standard value types and a string type. 
            </summary>
            <returns>Dictionary mapping types to type names</returns>
        </member>
        <member name="M:FluentUI.Demo.Shared.ReflectionExtensions.IsNullable(System.Type)">
            <summary>
            Checks if the specified type is a nullable value type. 
            Returns false for object references.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if the type is nullable like int? or Nullable&lt;Something&gt;</returns>
        </member>
        <member name="M:FluentUI.Demo.Shared.ReflectionExtensions.ToNameString(System.Type,System.Func{System.Type,System.String})">
            <summary>
            Convert type to the proper type name.
            Optional <paramref name="typeNameConverter"/> function can convert type names to strings 
            if type names should be decorated in some way either by converting text to markdown or 
            HTML links or adding some formatting.
            
            This method returns ValueTuple types without field names. 
            </summary>
            <param name="type">Type information.</param>
            <param name="typeNameConverter">The optional function that converts type name to string.</param>
            <returns>Full type name</returns>
        </member>
        <member name="M:FluentUI.Demo.Shared.ReflectionExtensions.ToNameString(System.Type,System.Func{System.Type,System.Collections.Generic.Queue{System.String},System.String},System.Boolean)">
            <summary>
            Convert type to the proper type name.
            Optional <paramref name="typeNameConverter"/> function can convert type names to strings 
            if type names should be decorated in some way either by converting text to markdown or 
            HTML links or adding some formatting.
            
            This method returns ValueTuple types without field names. 
            </summary>
            <param name="type">Type information.</param>
            <param name="typeNameConverter">The optional function that converts type name to string.</param>
            <param name="invokeTypeNameConverterForGenericType">
            True if typeNameConverter lambda function should be invoked for generic type name such as for the List name in case of List&lt;SomeType&gt;
            If the parameter value is false then typeNameConverter is not invoked for the generic type name and only the plain type name is returned.
            If the parameter value is true then typeNameConverter must handle generic type definitions carefully and avoid calling 
            ToNameString() to avoid infinite recursion.  
            This is an optional parameter with default value of false.</param>
            <returns>Full type name</returns>
        </member>
        <member name="M:FluentUI.Demo.Shared.ReflectionExtensions.ToParametersString(System.Reflection.MethodBase,System.Func{System.Type,System.Collections.Generic.Queue{System.String},System.String},System.Boolean)">
            <summary>
            Convert method parameters to the string. If method has no parameters then returned string is ()
            If parameters are present then returned string contains parameter names with their type names.
            Optional <paramref name="typeNameConverter"/> function can convert type names to strings 
            if type names should be decorated in some way either by converting text to markdown or 
            HTML links or adding some formatting.
            
            This method returns ValueTuple types with field names like this (Type1 name1, Type2 name2). 
            </summary>
            <param name="methodInfo">Method information</param>
            <param name="typeNameConverter">The optional function that converts type name to string.</param>
            <param name="invokeTypeNameConverterForGenericType">
            True if typeNameConverter lambda function should be invoked for generic type name such as for the List name in case of List&lt;SomeType&gt;
            If the parameter value is false then typeNameConverter is not invoked for the generic type name and only the plain type name is returned.
            If the parameter value is true then typeNameConverter must handle generic type definitions carefully and avoid calling 
            ToNameString() to avoid infinite recursion.  
            This is an optional parameter with default value of false.</param>
            <returns>Full list of parameter types and their names</returns>
        </member>
        <member name="M:FluentUI.Demo.Shared.ReflectionExtensions.ToTypeNameString(System.Reflection.ParameterInfo,System.Func{System.Type,System.Collections.Generic.Queue{System.String},System.String},System.Boolean)">
            <summary>
            Convert method parameter type to the string.
            Optional <paramref name="typeNameConverter"/> function can convert type names to strings 
            if type names should be decorated in some way either by converting text to markdown or 
            HTML links or adding some formatting.
            
            This method returns ValueTuple types with field names like this (Type1 name1, Type2 name2). 
            </summary>
            <param name="parameterInfo">Parameter information.</param>
            <param name="typeNameConverter">The optional function that converts type name to string.</param>
            <param name="invokeTypeNameConverterForGenericType">
            True if typeNameConverter lambda function should be invoked for generic type name such as for the List name in case of List&lt;SomeType&gt;
            If the parameter value is false then typeNameConverter is not invoked for the generic type name and only the plain type name is returned.
            If the parameter value is true then typeNameConverter must handle generic type definitions carefully and avoid calling 
            ToNameString() to avoid infinite recursion.  
            This is an optional parameter with default value of false.</param>
            <returns>Full type name of the parameter</returns>
        </member>
        <member name="M:FluentUI.Demo.Shared.ReflectionExtensions.ToTypeNameString(System.Reflection.MethodInfo,System.Func{System.Type,System.Collections.Generic.Queue{System.String},System.String},System.Boolean)">
            <summary>
            Convert method return value type to the string.
            Optional <paramref name="typeNameConverter"/> function can convert type names to strings 
            if type names should be decorated in some way either by converting text to markdown or 
            HTML links or adding some formatting.
            
            This method returns ValueTuple types with field names like this (Type1 name1, Type2 name2). 
            </summary>
            <param name="methodInfo">Method information.</param>
            <param name="typeNameConverter">The optional function that converts type name to string.</param>
            <param name="invokeTypeNameConverterForGenericType">
            True if typeNameConverter lambda function should be invoked for generic type name such as for the List name in case of List&lt;SomeType&gt;
            If the parameter value is false then typeNameConverter is not invoked for the generic type name and only the plain type name is returned.
            If the parameter value is true then typeNameConverter must handle generic type definitions carefully and avoid calling 
            ToNameString() to avoid infinite recursion.  
            This is an optional parameter with default value of false.</param>
            <returns>Full type name of the return value</returns>
        </member>
        <member name="M:FluentUI.Demo.Shared.ReflectionExtensions.ToTypeNameString(System.Reflection.PropertyInfo,System.Func{System.Type,System.Collections.Generic.Queue{System.String},System.String},System.Boolean)">
            <summary>
            Convert property type to the string.
            Optional <paramref name="typeNameConverter"/> function can convert type names to strings 
            if type names should be decorated in some way either by converting text to markdown or 
            HTML links or adding some formatting.
            
            This method returns ValueTuple types with field names like this (Type1 name1, Type2 name2). 
            </summary>
            <param name="propertyInfo">Property information.</param>
            <param name="typeNameConverter">The optional function that converts type name to string.</param>
            <param name="invokeTypeNameConverterForGenericType">
            True if typeNameConverter lambda function should be invoked for generic type name such as for the List name in case of List&lt;SomeType&gt;
            If the parameter value is false then typeNameConverter is not invoked for the generic type name and only the plain type name is returned.
            If the parameter value is true then typeNameConverter must handle generic type definitions carefully and avoid calling 
            ToNameString() to avoid infinite recursion.  
            This is an optional parameter with default value of false.</param>
            <returns>Full type name of the property</returns>
        </member>
        <member name="M:FluentUI.Demo.Shared.ReflectionExtensions.ToTypeNameString(System.Reflection.FieldInfo,System.Func{System.Type,System.Collections.Generic.Queue{System.String},System.String},System.Boolean)">
            <summary>
            Convert field type to the string.
            Optional <paramref name="typeNameConverter"/> function can convert type names to strings 
            if type names should be decorated in some way either by converting text to markdown or 
            HTML links or adding some formatting.
            
            This method returns ValueTuple types with field names like this (Type1 name1, Type2 name2). 
            </summary>
            <param name="fieldInfo">Field information.</param>
            <param name="typeNameConverter">The optional function that converts type name to string.</param>
            <param name="invokeTypeNameConverterForGenericType">
            True if typeNameConverter lambda function should be invoked for generic type name such as for the List name in case of List&lt;SomeType&gt;
            If the parameter value is false then typeNameConverter is not invoked for the generic type name and only the plain type name is returned.
            If the parameter value is true then typeNameConverter must handle generic type definitions carefully and avoid calling 
            ToNameString() to avoid infinite recursion.  
            This is an optional parameter with default value of false.</param>
            <returns>Full type name of the field</returns>
        </member>
        <member name="M:FluentUI.Demo.Shared.ReflectionExtensions.ToNameStringWithValueTupleNames(System.Type,System.Collections.Generic.IList{System.String},System.Func{System.Type,System.Collections.Generic.Queue{System.String},System.String},System.Boolean)">
            <summary>
            Convert type to the string.
            Optional <paramref name="typeNameConverter"/> function can convert type names to strings 
            if type names should be decorated in some way either by converting text to markdown or 
            HTML links or adding some formatting.
            
            This method returns ValueTuple types with field names like this (Type1 name1, Type2 name2). 
            </summary>
            <param name="type"></param>
            <param name="tupleNames">The names of the tuple fields from compiler-generated TupleElementNames attribute</param>
            <param name="typeNameConverter">The optional function that converts type name to string.</param>
            <param name="invokeTypeNameConverterForGenericType">
            True if typeNameConverter lambda function should be invoked for generic type name such as for the List name in case of List&lt;SomeType&gt;
            If the parameter value is false then typeNameConverter is not invoked for the generic type name and only the plain type name is returned.
            If the parameter value is true then typeNameConverter must handle generic type definitions carefully and avoid calling 
            ToNameString() to avoid infinite recursion.  
            This is an optional parameter with default value of false.</param>
            <returns>Full name of the specified type</returns>
        </member>
        <member name="M:FluentUI.Demo.Shared.ReflectionExtensions.ToNameString(System.Type,System.Collections.Generic.Queue{System.String},System.Func{System.Type,System.Collections.Generic.Queue{System.String},System.String},System.Boolean)">
            <summary>
            Convert type to the proper type name.
            Optional <paramref name="typeNameConverter"/> function can convert type names to strings 
            if type names should be decorated in some way either by converting text to markdown or 
            HTML links or adding some formatting.
            
            This method returns named tuples with field names like this (Type1 field1, Type2 field2).  <paramref name="tupleFieldNames"/> parameter
            must be specified with all tuple field names stored in the same order as they are in compiler-generated TupleElementNames attribute.
            If you do not know what it is then the better and easier way is to use ToTypeNameString() methods that retrieve field names from attributes.
            </summary>
            <param name="type"></param>
            <param name="tupleFieldNames">The names of value tuple fields as stored in TupleElementNames attribute. This queue is modified during call.</param>
            <param name="typeNameConverter">The optional function that converts type name to string.</param>
            <param name="invokeTypeNameConverterForGenericType">
            True if typeNameConverter lambda function should be invoked for generic type name such as for the List name in case of List&lt;SomeType&gt;
            If the parameter value is false then typeNameConverter is not invoked for the generic type name and only the plain type name is returned.
            If the parameter value is true then typeNameConverter must handle generic type definitions carefully and avoid calling 
            ToNameString() to avoid infinite recursion.  
            This is an optional parameter with default value of false.</param>
            <returns>Full type name</returns>
        </member>
        <member name="F:FluentUI.Demo.Shared.ReflectionExtensions.GenericTuples">
            <summary>
            Hash of all possible ValueTuple type definitions for quick check if type is value tuple.
            </summary>
        </member>
        <member name="M:FluentUI.Demo.Shared.ReflectionExtensions.CleanGenericTypeName(System.String)">
            <summary>
            Remove the parameter count part of the generic type name. 
            For example the generic list type name is List`1.
            This method leaves only the name part of the type such as List.
            If specified string does not contain the number of parameters 
            part then the same string is returned.
            </summary>
            <param name="genericTypeName">Type name</param>
            <returns>Type name without the number of parameters.</returns>
        </member>
    </members>
</doc>
