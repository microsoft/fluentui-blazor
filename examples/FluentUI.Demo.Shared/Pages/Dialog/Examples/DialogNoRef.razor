<div>
    <p>
        The dialog can only be <em>closed</em> by using the 'Close dialog' button.
        </p>
    <p>
        When 'Trap focus' is checked, only the elements within the dialog will receive focus. When unchecked, focus will also move outside of the
        dialog.
    </p>
    <FluentCheckbox Name="modal" @bind-Value="Modal">
        Modal
    </FluentCheckbox>
    <FluentCheckbox Name="trap" @bind-Value="TrapFocus">
        Trap focus
    </FluentCheckbox>
</div>
<FluentDialog Hidden="@Hidden" Id="foo" aria-label="Simple dialog" Modal=Modal TrapFocus=TrapFocus @ondialogdismiss=OnDismiss>
    <h2>Just a simple dialog</h2>
    <p>The 'Close dialog' button is automatically focussed.</p>
    <p>The 'Another button' doesn't do anything other than showing it can receive focus.</p>
    <FluentButton Autofocus="true" Appearance="Appearance.Accent" @onclick="OnClose">Close dialog</FluentButton>
    <FluentButton>Another button</FluentButton>
</FluentDialog>

<p>Hidden value: @Hidden</p>

<FluentButton Appearance="Appearance.Accent" @onclick="OnOpen">Open dialog with variable</FluentButton>

@code {
    public bool TrapFocus = true;
    public bool Modal = true;
    public bool Hidden = true;

    private void OnOpen()
    {
        Hidden = false;
        DemoLogger.WriteLine($"Dialog opened - Hidden: {Hidden}");

    }

    private void OnClose()
    {
        Hidden = true;
        DemoLogger.WriteLine($"Dialog closed - Hidden: {Hidden}");
        
    }

    private void OnDismiss(DialogEventArgs args)
    {
        if (args is not null && args.Reason is not null && args.Reason == "dismiss")
        {
            Hidden = true;
        }
    }
}