@inject DataSource Data
@using System.ComponentModel

<FluentDataGrid RowsData="@FilteredItems" ResizableColumns=true Pagination="@pagination" GridTemplateColumns="0.2fr 1fr 0.4fr 0.4fr 0.4fr 0.2fr" style="height: 405px; overflow:auto;">
    <TemplateColumn Title="Rank" Align="Align.Center" TGridItem="Country" TValue="string" Sortable="false">
        <img class="flag" src="_content/FluentUI.Demo.Shared/flags/@(context.Code).svg" />
    </TemplateColumn>
    @*<PropertyColumn Property="@(c => c.Name)" IsDefaultSort=SortDirection.Descending Sortable="true" Comparer="@StringLengthComparer.Instance">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch type="search" Autofocus=true @bind-Value=nameFilter @oninput="HandleCountryFilter" @onchange="HandleClear" Placeholder="Country name..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>*@
    <TemplateColumn Title="Name" DefaultSort=ListSortDirection.Descending SortProperty="s=> s.Name" TGridItem="Country" TValue="string">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch type="search" Autofocus=true @bind-Value=nameFilter @oninput="HandleCountryFilter" @onchange="HandleClear" Placeholder="Country name..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            @(context.Name)
        </ChildContent>
    </TemplateColumn>
    <PropertyColumn Property="@(c => c.Medals.Gold)" Sortable="true" Align="Align.Left" DefaultSort="ListSortDirection.Descending" />
    <PropertyColumn Property="@(c => c.Medals.Silver)" Sortable="true" Align="Align.Center" DefaultSort="ListSortDirection.Descending" />
    <PropertyColumn Property="@(c => c.Medals.Bronze)" Sortable="true" Align="Align.Right" DefaultSort="ListSortDirection.Descending"/>
    <PropertyColumn Property="@(c => c.Medals.Total)" Sortable="true" Align="Align.Right" />
</FluentDataGrid>


<FluentPaginator Value="@pagination" />

@code {
    IQueryable<Country>? items;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    string nameFilter = string.Empty;

    IQueryable<Country>? FilteredItems => items?.Where(x => x.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        items = (await Data.GetCountriesAsync()).AsQueryable();
    }

    private void HandleCountryFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }

    private void HandleClear(ChangeEventArgs args)
    {
        if (args is not null && string.IsNullOrWhiteSpace(args.Value?.ToString()))
        {
            nameFilter = string.Empty;
        }
    }

    public class StringLengthComparer : IComparer<string>
    {
        public static readonly StringLengthComparer Instance = new StringLengthComparer();

        public int Compare(string? x, string? y)
        {
            if (x is null)
            {
                return y is null ? 0 : -1;
            }

            if (y is null)
            {
                return 1;
            }

            return x.Length.CompareTo(y.Length);
        }
    }
}
