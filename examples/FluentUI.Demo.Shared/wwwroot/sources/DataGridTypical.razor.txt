@inject DataSource Data
@using System.ComponentModel

<FluentDataGrid RowsData="@FilteredItems" ResizableColumns=true Pagination="@pagination" GridTemplateColumns="0.2fr 1fr 0.2fr 0.2fr 0.2fr 0.2fr" RowClass="@rowClass" style="height: 405px; overflow:auto;">
    <TemplateColumn Title="Rank" Align="Align.Center" TGridItem="Country" TValue="string">
        <img class="flag" src="_content/FluentUI.Demo.Shared/flags/@(context.Code).svg" />
    </TemplateColumn>
    <PropertyColumn Property="@(c => c.Name)" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch type="search" Autofocus=true @bind-Value=nameFilter @oninput="HandleCountryFilter" @onchange="HandleClear" Placeholder="Country name..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(c => c.Medals.Gold)" Sortable="true" Align="Align.Left" DefaultSort="ListSortDirection.Descending" />
    <PropertyColumn Property="@(c => c.Medals.Silver)" Sortable="true" Align="Align.Center" DefaultSort="ListSortDirection.Descending" />
    <PropertyColumn Property="@(c => c.Medals.Bronze)" Sortable="true" Align="Align.Right" DefaultSort="ListSortDirection.Descending" />
    <PropertyColumn Property="@(c => c.Medals.Total)" Sortable="true" Align="Align.Right" />
</FluentDataGrid>


<FluentPaginator Value="@pagination" />

@code {
    IQueryable<Country>? items;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    string nameFilter = string.Empty;

    Func<Country, string> rowClass = x => x.Name.StartsWith("A") ? "highlighted-row" : string.Empty;

    IQueryable<Country>? FilteredItems => items?.Where(x => x.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        items = (await Data.GetCountriesAsync()).AsQueryable();
    }

    private void HandleCountryFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }

    private void HandleClear(ChangeEventArgs args)
    {
        if (args is not null && string.IsNullOrWhiteSpace(args.Value?.ToString()))
        {
            nameFilter = string.Empty;
        }
    }
}
