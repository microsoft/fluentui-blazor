@inject IToastService ToastService

<FluentStack>
    <FluentButton Appearance=Appearance.Neutral @onclick="@ShowExample">Progress toast example 1</FluentButton>
    <FluentButton @ref=_button Appearance="Appearance.Neutral" @onclick=UpdateProgress>Update</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" @onclick=Reset>Reset</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" @onclick=Close>Close</FluentButton>
</FluentStack>

@code {
    private FluentButton? _button;
    private static string _id = "progressToast";

    private ToastParameters<ProgressToastData> _progressToastData = new()
        {
            Id = _id,
            Intent = ToastIntent.Upload,
            Title = "Uploading file",
            Timeout = 0,
            TopAction = new ToastAction() { Text = "Cancel", Href = "#", OnClick = ClickedPrimary },
            //SecondaryAction = new ToastAction() { Text = "Pause", Href = "#", OnClick = ClickedSecondary },
            Data = new ProgressToastData()
            {
                Details = "This may take a while.",
                Progress = "0",
            },
        };

    private void ShowExample()
    {
        ToastService.ShowProgressToast(_progressToastData);
    }

    private static void ClickedPrimary()
    {
        DemoLogger.WriteLine("Clicked cancel action");
    }

    private static void ClickedSecondary()
    {
        DemoLogger.WriteLine("Clicked pause action");
    }

    private async Task UpdateProgress()
    {
        _button!.Disabled = true;
        for (int i = 0; i < 100; i++)
        {
            _progressToastData.Data.Progress = i.ToString();
            ToastService.UpdateToast(_id, _progressToastData);
            await Task.Delay(100);
            //StateHasChanged();
        };

    }

    private void Reset()
    {
        _progressToastData.Data.Progress = "0";
        ToastService.UpdateToast(_id, _progressToastData);
    }

    private void Close()
    {
        ToastService.CloseToast(_id);
    }
}