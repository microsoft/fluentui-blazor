@inject IToastService ToastService
@inject NavigationManager NavigationManager

<FluentStack Wrap=true>
    <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowSuccess("Success confirmation."))">
        <FluentIcon Icon="Icons.Filled.Size20.CheckmarkCircle" Color="@Color.Success" Slot="start" />
        Show Success
    </FluentButton>
    <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowWarning("Warning confirmation."))">
        <FluentIcon Icon="Icons.Filled.Size20.Warning" Color="@Color.Warning" Slot="start" />
        Show Warning
    </FluentButton>
    <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowError("Error confirmation."))">
        <FluentIcon Icon="Icons.Filled.Size20.DismissCircle" Color="@Color.Error" Slot="start" />
        Show Error
    </FluentButton>
    <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowInfo("Info confirmation."))">
        <FluentIcon Icon="Icons.Filled.Size20.Info" Color="@Color.Info" Slot="start" />
        Show Info
    </FluentButton>
    <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowProgress("Progress confirmation."))">
        <FluentIcon Icon="Icons.Regular.Size20.Flash" Color="@Color.Neutral" Slot="start" />
        Show progress
    </FluentButton>
    <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowUpload("Upload confirmation."))">
        <FluentIcon Icon="Icons.Regular.Size20.ArrowUpload" Color="@Color.Neutral" Slot="start" />
        Show upload
    </FluentButton>
    <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowDownload("Download confirmation."))">
        <FluentIcon Icon="Icons.Regular.Size20.ArrowDownload" Color="@Color.Neutral" Slot="start" />
        Show download
    </FluentButton>
    <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowEvent("Event confirmation."))">
        <FluentIcon Icon="Icons.Regular.Size20.CalendarLTR" Color="@Color.Neutral" Slot="start" />
        Show event
    </FluentButton>
    <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowAvatar("Avatar confirmation."))">
        <FluentIcon Icon="Icons.Regular.Size20.Person" Color="@Color.Neutral" Slot="start" />
        Show avatar
    </FluentButton>
    <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowCustom("Custom confirmation.", null, settings => { settings.Icon = (FluentIcons.Delete,Color.Accent, IconVariant.Regular); }))">
        <FluentIcon Icon="Icons.Regular.Size20.Delete" Color="@Color.Neutral" Slot="start" />
        Show custom
    </FluentButton>
</FluentStack>
<FluentStack Wrap=true>
    <FluentButton Appearance=Appearance.Neutral @onclick="@(() => 
        ToastManager.ShowCustom("Confirmation without an icon."))">
        Without icon
    </FluentButton>

    <FluentButton Appearance=Appearance.Neutral @onclick="@(() => 
        ToastManager.ShowSuccess("Info confirmation with action.",
        action => { action.Text = "Action"; }))">
        With action
    </FluentButton>

    <FluentButton Appearance=Appearance.Neutral @onclick="@(() => 
        ToastManager.ShowInfo("Info confirmation custom settings.", null,
        settings => {
            settings.Timeout = 10;
        }))">
        With settings
    </FluentButton>
    
    <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowInfo("Click to refresh the page",  settings => settings.OnClick = () => NavigationManager.NavigateTo("/", true)))">
        Custom action on click
    </FluentButton>

    <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowSuccess("Success confirmation with a lot of text to see what a toast looks like when it's really big."))">
        <FluentIcon Icon="Icons.Filled.Size20.CheckmarkCircle" Color="@Color.Success" Slot="start" />
        Long Success
    </FluentButton>
    
</FluentStack>