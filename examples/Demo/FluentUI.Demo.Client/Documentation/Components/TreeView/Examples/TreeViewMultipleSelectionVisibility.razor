<div class="my-2">
    <b>Selected items:</b> @(string.Join("; ", SelectedItems?.Select(i => i.Text) ?? []))
</div>

<FluentTreeView Items="@Items"
                HideSelection="true"
                SelectionMode="TreeSelectionMode.Multiple"
                MultipleSelectionVisibility="@GetTreeSelectionVisibility"
                @bind-SelectedItems="@SelectedItems">
</FluentTreeView>

@code
{
    private IEnumerable<ITreeViewItem>? SelectedItems;
    private IEnumerable<ITreeViewItem>? Items = new List<ITreeViewItem>();

    // Read the Tree content
    protected override void OnInitialized()
    {
        Items = GetCompanyOrganization();
    }

    // Example of a custom visibility function
    private TreeSelectionVisibility GetTreeSelectionVisibility(ITreeViewItem item)
    {
        return item.Id.First() switch
        {
            // Company or Department => collapsed checkbox
            'C' => TreeSelectionVisibility.Collapse,
            'D' => TreeSelectionVisibility.Hidden,

            // Employee or others => visible checkbox
            'E' => TreeSelectionVisibility.Visible,
            _ => TreeSelectionVisibility.Visible
        };
    }

    // Example of a tree with a company organization
    // (5 companies containing 4 departments with 20 employees)
    private TreeViewItem[] GetCompanyOrganization()
    {
        return SampleData.People
                         .GetOrganization(companyCount: 5, departmentCount: 4, employeeCount: 20)
                         .ToTreeViewItems(includeIcons: false)
                         .ToArray();
    }
}
