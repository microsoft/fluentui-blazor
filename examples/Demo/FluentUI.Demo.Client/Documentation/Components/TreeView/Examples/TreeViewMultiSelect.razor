<div class="my-2">
    <b>Selected items:</b> @(string.Join("; ", SelectedItems?.Select(i => i.Text) ?? []))
</div>

<FluentTreeView Items="@Items"
                HideSelection="true"
                SelectionMode="TreeSelectionMode.Multiple"
                @bind-SelectedItems="@SelectedItems"
                LazyLoadItems="true">
</FluentTreeView>

@code
{
    private IEnumerable<ITreeViewItem>? SelectedItems;
    private IEnumerable<ITreeViewItem>? Items = new List<ITreeViewItem>();

    // Read the Tree content
    protected override void OnInitialized()
    {
        Items = CreateTree(maxLevel: 3, nbItemsPerLevel: 5).Items ?? [];
        SelectedItems = Items.Take(2);
    }

    // Recursive method to create tree
    private int Count = -1;
    private TreeViewItem CreateTree(int maxLevel, int nbItemsPerLevel, int level = 0)
    {
        Count++;

        var treeItem = new TreeViewItem
        {
            Text = $"Item {Count}",
            Items = level == maxLevel
                              ? null
                              : new List<TreeViewItem>(Enumerable.Range(1, nbItemsPerLevel)
                                                                 .Select(i => CreateTree(maxLevel, nbItemsPerLevel, level + 1))),
        };

        return treeItem;
    }
}
