@inject IDialogService DialogService

<div>
    <InputCheckbox @bind-Value="@IsModal" />
    <FluentLabel Style="margin-bottom: 12px;">Is Modal</FluentLabel>
</div>

<FluentButton OnClick="@(e => OpenPanelAsync(DialogAlignment.Start))" Appearance="ButtonAppearance.Primary">Open Panel (Start)</FluentButton>
<FluentButton OnClick="@(e => OpenPanelAsync(DialogAlignment.End))" Appearance="ButtonAppearance.Primary">Open Panel (End)</FluentButton>

<hr />
<div>
    John: @John
</div>

@code
{
    private bool IsModal = true;
    private Dialog.PersonDetails John = new() { Age = "20" };

    private async Task OpenPanelAsync(DialogAlignment alignment)
    {
        var result = await DialogService.ShowPanelAsync<Dialog.SimpleDialog>(options =>
        {
            options.Modal = IsModal;
            options.Alignment = alignment;

            options.Parameters.Add(nameof(Dialog.SimpleDialog.Name), "John");  // Simple type
            options.Parameters.Add(nameof(Dialog.SimpleDialog.Person), John);  // Updatable object

            options.OnStateChange = (e) =>
            {
                Console.WriteLine($"State changed: {e.State}");
            };
        });

        if (result.Cancelled)
        {
            Console.WriteLine($"Dialog Canceled: {result.Value}");
        }
        else
        {
            Console.WriteLine($"Dialog Saved: {result.Value}");
        }
    }
}
