@inject IDialogService DialogService

<FluentButton OnClick="@(e => OpenDialogAsync(DialogAlignment.End))">Open Panel</FluentButton>
<FluentButton OnClick="@(e => OpenDialogAsync(DialogAlignment.Default))">Open Dialog</FluentButton>


<hr />
<div>
    John: @John
</div>

@code
{
    private SimpleDialog.PersonDetails John = new() { Age = "20" };

    private async Task OpenDialogAsync(DialogAlignment alignment)
    {
        var dialog = await DialogService.ShowDialogAsync<SimpleDialog>(options =>
        {
            options.Alignment = alignment;

            options.Parameters.Add(nameof(SimpleDialog.Name), "John");  // Simple type
            options.Parameters.Add(nameof(SimpleDialog.Person), John);  // Updatable object

            options.OnStateChange = (e) =>
            {
                Console.WriteLine($"State changed: {e.State}");
            };
        });
        
        var result = await dialog.Result;

        if (result.Cancelled)
        {
            Console.WriteLine($"Dialog Canceled: {result.Value}");
        }
        else
        {
            Console.WriteLine($"Dialog Saved: {result.Value}");
        }
    }
}
