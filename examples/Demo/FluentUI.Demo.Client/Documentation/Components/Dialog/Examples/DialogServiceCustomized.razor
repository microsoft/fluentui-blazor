@inject IDialogService DialogService

<FluentButton OnClick="@(e => OpenDialogAsync(DialogAlignment.Default))" Appearance="ButtonAppearance.Primary">Open Dialog</FluentButton>

<hr />
<div>
    John: @John
</div>

@code
{
    private Dialog.PersonDetails John = new() { Age = "20" };

    private async Task OpenDialogAsync(DialogAlignment alignment)
    {
        var result = await DialogService.ShowDialogAsync<Dialog.CustomizedDialog>(options =>
        {
            options.Header.Title = "Dialog Title";
            options.Alignment = alignment;
            options.Style = alignment == DialogAlignment.Default ? "max-height: 400px;" : null;

            options.Parameters.Add(nameof(Dialog.CustomizedDialog.Name), "John");  // Simple type
            options.Parameters.Add(nameof(Dialog.CustomizedDialog.Person), John);  // Updatable object

            options.OnStateChange = (e) =>
            {
                Console.WriteLine($"State changed: {e.State}");
            };
        });
        
        if (result.Cancelled)
        {
            Console.WriteLine($"Dialog Canceled: {result.Value}");
        }
        else
        {
            Console.WriteLine($"Dialog Saved: {result.Value}");
        }
    }
}
