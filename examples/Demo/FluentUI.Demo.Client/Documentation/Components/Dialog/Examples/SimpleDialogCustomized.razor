<FluentDialogBody>

    <TitleTemplate>
        @Dialog?.Options.Header.Title
    </TitleTemplate>

    <ChildContent>
        <FluentTextInput Label="@($"Hello {Name}. How old are you?")" @bind-Value="@Person.Age" />
        <hr />
        @LongText
    </ChildContent>

    <ActionTemplate>
        <FluentButton OnClick="btnCancel_Click">Cancel</FluentButton>
        <FluentButton OnClick="btnOK_Click" Appearance="ButtonAppearance.Primary">OK</FluentButton>
    </ActionTemplate>

</FluentDialogBody>

@code {
    private static MarkupString LongText = GetVeryLongText();

    // If you want to use this razor component in standalone mode,
    // you can use a nullable IDialogInstance property.
    // If the value is not null, the component is running using the DialogService.
    // `public IDialogInstance? FluentDialog { get; set; }`
    [CascadingParameter]
    public required IDialogInstance Dialog { get; set; }

    // A simple type is not updatable
    [Parameter]
    public string? Name { get; set; }

    // A class is updatable
    [Parameter]
    public PersonDetails Person { get; set; } = new();  

    // A nullable type is optional
    [Parameter]
    public int? NotAssignedParam { get; set; }

    private async Task btnOK_Click()
    {
        await Dialog.CloseAsync(DialogResult.Ok("Yes"));
    }

    private async Task btnCancel_Click()
    {
        await Dialog.CloseAsync(DialogResult.Cancel("No"));
    }

    private static MarkupString GetVeryLongText()
    {
        return (MarkupString)string.Join("", SampleData.Text.LoremIpsum.Select(i => $"<p>{i}</p>"));
    }

    public class PersonDetails
    {
        public string Age { get; set; } = "";
        public override string ToString() => $"Age: {Age}";
    }
}
