<FluentSelect Label="Simple" Items="@Digits" />

<FluentSelect Label="Functions" Items="@Digits"
              OptionDisabled="@(item => item == "Two")"
              OptionText="@(item => item?.ToUpper())"
              OptionValue="@(item => $"value-{item}")"
              OptionSelected="@(item => item == "One")" />

<FluentSelect Label="Binding" Items="@Digits" @bind-Value="@Value" />

<FluentSelect Label="Template" Items="@Digits" @bind-Value="@Value">
    <OptionTemplate>
        @if (!String.IsNullOrEmpty(context))
        {
            <span>➡️</span>
            @context
        }
    </OptionTemplate>
</FluentSelect>

<FluentSelect Label="Manual" @bind-Value="@Value">
    <FluentOption Value="One">One</FluentOption>
    <FluentOption Value="Two">Two</FluentOption>
    <FluentOption Value="Three">Three</FluentOption>
</FluentSelect>

<FluentSelect Label="Colors" Items="@GetEnumValues()" @bind-Value="@SelectedColor" />

<div>
    <FluentButton OnClick="@(e => { Value = "One"; })">All to 'One'</FluentButton>
</div>

<div style="margin-top: 16px;">
    <div>Selected value: @Value</div>
    <div>Selected color: @SelectedColor</div>
</div>

@code {

    private string?[] Digits = new string?[] { null, "One", "Two", "Three" };
    private string? Value;
    private Color SelectedColor;

    public static IEnumerable<Color> GetEnumValues()
    {
        return Enum.GetValues(typeof(Color)).Cast<Color>();
    }
}
