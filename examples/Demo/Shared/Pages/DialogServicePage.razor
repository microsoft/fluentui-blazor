@page "/DialogService"
<h1>DialogService</h1>

<p>
    The DialogService is a service that can be used to show dialogs. It can be injected into a page and used to show 
    different type of dialogs.
</p>
<p>
    For a component to be useable by the DialogService, it needs to implement <code>IDialogContentComponent&lt;T&gt;</code>.
</p>
<p>
    The DialogService is automatically registered in the DI container with the <code>AddFluentUIComponents()</code> call.
</p>

<p>
    See the following pages for examples on how to use the DialogService.
    <ul>
        <li><a href="/Dialog">Regular dialogs</a></li>
        <li><a href="/MessageBox">Message boxes</a></li>
        <li><a href="/Panel">Panels</a></li>
        <li><a href="/SplashScreen">Splash screens</a></li>
    </ul>
</p>
<ApiDocumentation Component="typeof(DialogService)" />

<p>
    You can exchange data between the component that opened the dialog and the dialog component by using the <code>DialogParameters.Content</code> 
    parameter to specify the type of data and providing a callback function to the <code>DialogParameters.OnDialogResult</code> method. <br />
    Any changes you make to the data in the Dialog component will be reflected in the Data object in the calling component when the dialog is closed.<br />
    You can use the <code>CreateDialogCallback</code> method in the <code>Dialogservice</code> to create the callback function.<br />
    Typically a call would look like this:
    <CodeSnippet Language="csharp">OnDialogResult = DialogService.CreateDialogCallback(this, HandleIt),</CodeSnippet>
    where <code>this</code> represents the dialog calling component and <code>HandleIt</code> is the method in the calling component that will be called 
    when the dialog is closed. It receives the <code>DialogResult</code> as a parameter.
</p>

<p>
    An typical implemtation could look something like this:
    <CodeSnippet Language="csharp">
        private async Task HandleIt(DialogResult result)
        {
            if (result.Cancelled)
            {
                //Handle the cancellation
                return;
            }
            if (result.Data is not null)
            {
                //Handle the data
                   
            }
            //Handle closing the dialog
            await Task.Run(() => ...);
        }
    </CodeSnippet>
</p>