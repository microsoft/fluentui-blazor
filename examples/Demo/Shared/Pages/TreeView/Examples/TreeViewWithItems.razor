<FluentTreeView Items="@Items" LazyLoadItems="true">
    <ItemTemplate>
        @context.Text
        <span style="color: var(--accent-fill-rest); margin: 0 4px;">
            @(context.Items == null ? "" : $"[{context.Items.Count()}]")
        </span>
    </ItemTemplate>
</FluentTreeView>

Total items: @Count

@code
{
    private Icon IconCollapsed = new Icons.Regular.Size20.Folder();
    private Icon IconExpanded = new Icons.Regular.Size20.FolderOpen();

    private int Count = -1;
    private IEnumerable<ITreeViewItem>? Items = new List<ITreeViewItem>();

    protected override void OnInitialized()
    {
        Items = CreateTree(maxLevel: 5, maxItemsPerLevel: 12).Items;
    }

    // Recursive method to create tree
    public TreeViewItem CreateTree(int maxLevel, int maxItemsPerLevel, int level = 0)
    {
        Count++;

        int nbItems = Random.Shared.Next(maxItemsPerLevel - 3, maxItemsPerLevel);

        var treeItem = new TreeViewItem
            {
                Text = $"Item {Count}",
                Disabled = Count % 7 == 0,
                IconCollapsed = IconCollapsed,
                IconExpanded = IconExpanded,
                Items = level == maxLevel
                      ? null
                      : new List<TreeViewItem>(Enumerable.Range(1, nbItems).Select(i => CreateTree(maxLevel, maxItemsPerLevel, level + 1)))
            };
        return treeItem;
    }


    public class TreeViewItem : ITreeViewItem
    {
        public string Text { get; set; } = "";
        public IEnumerable<ITreeViewItem>? Items { get; set; }
        public Icon? IconCollapsed { get; set; }
        public Icon? IconExpanded { get; set; }
        public bool Disabled { get; set; }
    }
}
