@page "/Autocomplete"

@using FluentUI.Demo.Shared.Pages.List.Autocomplete.Examples

<PageTitle>@App.PageTitle("Autocomplete")</PageTitle>

<h1>Autocomplete</h1>

<blockquote>
    @(new MarkupString(DemoNavProvider.EditFormOffIcon))
    The <b>FluentAutocomplete</b> component is not yet fully compatible with the <code>EditForm</code> and <code>FluentEditForm</code> elements.
    Some functionalities, such as error messages, the requirement message or the validation messages are missing.
</blockquote>

<h2 id="example">Examples</h2>

<DemoSection Title="Default" Component="@typeof(AutocompleteDefault)" />

<DemoSection Title="Customized options" Component="@typeof(AutocompleteCustomized)" />

<DemoSection Title="Multiple == false" Component="@typeof(AutoCompleteMaxSingleItem)" />

<DemoSection Title="Many Items" Component="@typeof(AutocompleteManyItems)">
    <Description>
        <p>
            This example shows how you can use <code>ImmediateDelay</code> to control the delay between the user input and the search for options. A value of 0 means no delay
        </p>
    </Description>
</DemoSection>

<DemoSection Title="Close via code" Component="@typeof(AutocompleteCloseViaCode)">
    <Description>
        <p>
            This example demonstrates how to close the dropdown in code.
        </p>
    </Description>
</DemoSection>

<DemoSection Title="Different object instances from search results" Component="@typeof(AutocompleteDifferentObjectInstances)">
    <Description>
        <p>
            By default the <code>FluentAutocomplete</code> component compares the search results by instance with it's internal selected items. You can control that behaviour by providing the <code>OptionComparer</code> parameter.

            It expects a function that compares the search result item with the selected item and returns <code>true</code> if they are equal. The first parameter of this function represents the item from the internal list of the component and the second parameter is the selected item from the search results.  
        </p>
    </Description>
</DemoSection>

<h2 id="documentation">Documentation</h2>

<ApiDocumentation Component="typeof(FluentAutocomplete<>)" GenericLabel="TOption" />

<ApiDocumentation Component="typeof(FluentPersona)" />

<h2>Accessibility</h2>

This component is compatible with accessibility rules.
<br />
Except this <a href="https://accessibilityinsights.io/info-examples/web/aria-valid-attr-value/" target="_blank">Invalid ARIA attribute value: aria-controls="[id]-popup"</a> when the list is expanded (will be solved later).
<br />
You can customize these 3 messages to be read by screen readers
<br />
<ul>
    <li><code>FluentAutocomplete.AccessibilitySelected = "Selected {0}"</code> List of selected items.</li>
    <li><code>FluentAutocomplete.AccessibilityNotFound = "No items found"</code> When the search criteria returns an empty list.</li>
    <li><code>FluentAutocomplete.AccessibilityReachedMaxItems = "The maximum number of selected items has been reached."</code> When the maximum number of selected items has been reached.</li>
</ul>
