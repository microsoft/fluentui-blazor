@page "/ToastService"
<h1>ToastService</h1>

<p>
    The ToastService is a service that can be used to show toasts. It can be injected into a page and used to show 
    different type of toasts.
</p>
<p>
    For a component to be useable by the ToastService, it needs to implement <code>IToastContentComponent&lt;T&gt;</code> 
    where <code>T</code> represent the type of the data to be shown in the toast.
</p>
<p>
    The ToastService is automatically registered in the DI container with the <code>AddFluentUIComponents()</code> call.
</p>

<p>
    See the <a href="/Toast">toast page</a> for examples of the different types of available toasts:
    <ul>
        <li>Confirmation toast</li>
        <li>Communication toast</li>
        <li>Progress toast</li>
    </ul>
</p>
<ApiDocumentation Component="typeof(ToastService)" />

<p>
    You can exchange data between the component that opened the toast and the toast component by using the <code>ToastParameters.Content</code> 
    parameter to specify the type of data and providing a callback function to the <code>ToastParameters.OnDialogResult</code> method. <br />
    Any changes you make to the data in the toast component will be reflected in the Content object in the calling component when the toast is closed.<br />
</p>

<p>
    An typical implemtation of a callback function could look something like this:
    <CodeSnippet Language="csharp">
        private async Task HandleIt(DialogResult result)
        {
            if (result.Cancelled)
            {
                //Handle the cancellation
                return;
            }
            if (result.Data is not null)
            {
                //Handle the data
                   
            }
            //Handle closing the dialog
            await Task.Run(() => ...);
        }
    </CodeSnippet>
</p>