@inject IJSRuntime js

<style>
    .pull-demo {
        height: 51vh;
        max-width: 400px;
        border: calc(var(--stroke-width)* 1px) solid var(--neutral-stroke-rest);
        border-radius: calc(var(--control-corner-radius)* 1px);
        overflow: auto;
    }
</style>

<div class="pull-demo">
    <FluentPullToRefresh Direction="@PullDirection.Down" OnRefresh="OnRefresh">
        <div style="user-select: none; display:flex; flex-direction:column; align-items: flex-start; padding: calc(var(--design-unit) * 1px);">
            @for (int i = 1; i <= count; i++)
            {
                <span @key="i">item @i</span>
            }
        </div>
    </FluentPullToRefresh>
</div>

@code {
    int refreshcount = 0;
    int count = 20;

    public async Task<bool> OnRefresh()
    {
        refreshcount++;
        DemoLogger.WriteLine($"Pull down refresh count {refreshcount}");
        await Task.Delay(1000);
        count += 20;
        return true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load touch emulator. This is included to enable touch events on desktop and to add compatibility
            // with all browsers. It is not needed for the actual component.
            //await js.InvokeVoidAsync("loadTouchEmulator");
        }
    }
}
