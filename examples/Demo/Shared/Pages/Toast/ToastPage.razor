@page "/Toast"

@inject IToastService ToastService

@using FluentUI.Demo.Shared.Pages.Toast.Examples
@using Microsoft.FluentUI.AspNetCore.Components

<PageTitle>@App.PageTitle("Toast")</PageTitle>

<h1>Toast</h1>

<p>
    Toasts, referred to as “notifications” in the UI, are pop-up notifications that keep users informed by briefly:
    <ul>
        <li>Confirming an action they took.</li>
        <li>Informing them about a timely event.</li>
        <li>Communicating the status of a process initiated.</li>
    </ul>
</p>
<p>
    The information in a toast is useful and relevant but never critical.
</p>

<h2 id="example">Examples</h2>

<DemoSection Title="Default Toast" Component="typeof(ToastDefault)"></DemoSection>

<DemoSection Title="Toast with options" Component="typeof(ToastDetailled)"></DemoSection>

<DemoSection Title="Confirmation Toasts" Component="typeof(ToastConfirmationToasts)"></DemoSection>

<DemoSection Title="Communication Toasts" Component="typeof(ToastCommunicationToasts)"></DemoSection>

<DemoSection Title="Progress Toasts" Component="typeof(ToastProgressToasts)"></DemoSection>

<DemoSection Title="Custom component" Component="typeof(ToastCustomComponent)" AdditionalFiles="@(new []{"MyToastComponent.razor", "MyToastData.cs"})"></DemoSection>

<DemoSection Title="Remove toasts" Component="typeof(ToastClearList)" ShowDownloads=false>
    <Description>
        Toasts can be removed by calling <code>ToastManager.Clear...()</code> methods. By default,
        toasts are removed from the queue as well. To keep toasts in the queue, pass <code>false</code> for the <code>includeQueue</code> parameter.
    </Description>
</DemoSection>

<DemoSection Title="Remove queued toasts" Component="typeof(ToastClearQueue)" ShowDownloads=false></DemoSection>

<h2 id="toastprovider">ToastProvider</h2>

<strong>IMPORTANT!!</strong>
<p>
    Toasts are rendered through the <code>&lt;FluentToastProvider /&gt;</code> component. This component needs to be added to the main layout of your application/site.
    You typically do this in the <code>MainLayout.razor</code> file at the end of the <code>&lt;main&gt;</code> section like shown below.
</p>
<p>
    <strong>
        For the Toasts to work properly, the <code>&lt;FluentToastProvider/&gt;</code> needs interactivity! If you are using "per page" interactivity, make sure to add a <code>@@rendermode</code> to
        either the provider itself or the component the provider is placed in.
    </strong>
</p>
<CodeSnippet>
    &lt;main&gt;
        &lt;nav&gt;
        :
        &lt;/nav&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;article id=&quot;article&quot;&gt;
                @@Body
            &lt;/article&gt;
        &lt;/div&gt;
        &lt;FluentToastProvider MaxToastCount=&quot;10&quot; /&gt;
    &lt;/main&gt;
</CodeSnippet>

<p>
    See the documentation below for more information about the <code>FluentToastProvider</code> parameters.
</p>

<h2 id="documentation">Documentation</h2>

<ApiDocumentation Component="typeof(FluentToastProvider)" />

<ApiDocumentation Component="typeof(FluentToast)" />

