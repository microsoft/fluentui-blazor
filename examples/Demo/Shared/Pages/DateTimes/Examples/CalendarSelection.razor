<FluentGrid>
    <FluentGridItem>
        <FluentLabel>Single</FluentLabel>
        <FluentCalendar DisabledDateFunc="@DisabledDay"
                        @bind-Value="@SelectedDay"
                        SelectMode="CalendarSelectMode.Single" />
        <p>Selected days: @SelectedDay?.ToShortDateString()</p>
    </FluentGridItem>
    <FluentGridItem>
        <FluentLabel>Range</FluentLabel>
        <FluentCalendar DisabledDateFunc="@DisabledDay"
                        @bind-SelectedDates="@SelectedRange"
                        SelectMode="CalendarSelectMode.Range" />
        <p>Selected days: @DisplaySelectedDays(SelectedRange)</p>
    </FluentGridItem>
    <FluentGridItem>
        <FluentLabel>Multiple (max 5 days)</FluentLabel>
        <FluentCalendar DisabledDateFunc="@DisabledDay"
                        @bind-SelectedDates="@SelectedDays"
                        @bind-SelectedDates:after="@ValidateSelectedDays"
                        SelectMode="CalendarSelectMode.Multiple" />
        <FluentMessageBar Visible="@DisplayError" Intent="MessageIntent.Error" Style="width: 250px;">
            You can select a maximum of 5 days. Delete a day to select a new one.
        </FluentMessageBar>
        <p>Selected days: @DisplaySelectedDays(SelectedDays)</p>
    </FluentGridItem>
</FluentGrid>

@code
{
    private DateTime? SelectedDay = null;
    private ICollection<DateTime> SelectedRange = new List<DateTime>();
    private ICollection<DateTime> SelectedDays = new List<DateTime>();
    private bool DisplayError = false;

    private bool DisabledDay(DateTime date) => date.Day == 3 || date.Day == 8 || date.Day == 20;

    private void ValidateSelectedDays()
    {
        if (SelectedDays.Count > 5)
        {
            SelectedDays.Remove(SelectedDays.Last());
            DisplayError = true;
        }
        else
        {
            DisplayError = false;
        }

    }

    private RenderFragment DisplaySelectedDays(IEnumerable<DateTime> days) => builder =>
    {
        builder.OpenElement(0, "ul");
        foreach (var day in days)
        {
            builder.OpenElement(1, "li");
            builder.AddContent(2, day.ToShortDateString());
            builder.CloseElement();
        }
        builder.CloseElement();
    };
}
