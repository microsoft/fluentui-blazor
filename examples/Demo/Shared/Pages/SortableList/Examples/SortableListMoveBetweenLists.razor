<style>
    .fluent-sortable-list.darker {
        --fluent-sortable-list-background-color: var(--neutral-layer-4) !important;
    }
</style>


<FluentGrid Justify="JustifyContent.FlexStart" Spacing="3">
    <FluentGridItem xs="12" sm="6">
        <h5>List 1</h5>
        <FluentSortableList Id="shared1" Class="darker" Group="sharedLists" OnUpdate="@HandleSort" OnRemove="@HandleRemove" Items="@items1" Context="item">
            <ItemTemplate>@item.Name</ItemTemplate>
        </FluentSortableList>
    </FluentGridItem>
    <FluentGridItem xs="12" sm="6">
        <h5>List 2</h5>
        <FluentSortableList Id="shared2" Group="sharedLists" OnUpdate="@HandleSort" OnRemove="@HandleRemove" Items="@items2" Context="item">
            <ItemTemplate>@item.Name</ItemTemplate>
        </FluentSortableList>
    </FluentGridItem>
</FluentGrid>

@code {
    public class Item
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";

        public bool Disabled { get; set; } = false;
    }

    public List<Item> items1 = Enumerable.Range(1, 10).Select(i => new Item { Id = i, Name = $"Item {i}" }).ToList();

    public List<Item> items2 = Enumerable.Range(11, 10).Select(i => new Item { Id = i, Name = $"Item {i}" }).ToList();


    private void HandleRemove(FluentSortableListEventArgs args)
    {
        if (args?.FromListId is null || args?.ToListId is null || args.FromListId == args.ToListId)
        {
            return;
        }
        // get the old list (currently containing the item)
        var from = GetList(args.FromListId);

        // get the new list (the list the item was dropped on)
        var to = GetList(args.ToListId);

        // get the item at the old index in list from
        var item = from[args.OldIndex];

        // add it to the new index in list to
        to.Insert(args.NewIndex, item);

        // remove the item from the old index in list from
        from.Remove(from[args.OldIndex]);
    }

    private void HandleSort(FluentSortableListEventArgs args)
    {
        if (args?.FromListId is null || args?.ToListId is null || args.FromListId != args.ToListId)
        {
            return;
        }

        var oldIndex = args.OldIndex;
        var newIndex = args.NewIndex;

        // the item is dropped on the same list it is from, so it doesn't matter which list we get
        var items = GetList(args.FromListId);
        var itemToMove = items[oldIndex];
        items.RemoveAt(oldIndex);

        if (newIndex < items.Count)
        {
            items.Insert(newIndex, itemToMove);
        }
        else
        {
            items.Add(itemToMove);
        }
    }

    private List<Item> GetList(string id) =>
        id switch
        {
            "shared1" => items1,
            "shared2" => items2,
            _ => throw new ArgumentException($"No list with id {id}")
        };

}
