@page "/issue-tester"
@inject DataSource Data


<EditForm Model="@starship" OnValidSubmit="@HandleValidSubmit" FormName="starship_fluent_entry" novalidate>
    <DataAnnotationsValidator />
    <FluentValidationSummary />


    <FluentStack Orientation="Orientation.Vertical">
        <div>
            <FluentAutocomplete TOption="Country"
                                Name="countries"
                                AutoComplete="off"
                                Required
                                Label="Select countries"
                                Width="250px"
                                Placeholder="Select countries"
                                OnOptionsSearch="@OnSearchAsync"
                                MaximumSelectedOptions="3"
                                OptionText="@(item => item.Name)"
                                Multiple="true"
                                @bind-SelectedOptions="@starship.Countries" />
            <FluentValidationMessage For="@(() => starship.Countries)" />
        </div>
        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>
    </FluentStack>
</EditForm>

@code {


    protected override void OnInitialized()
    {
        starship.ProductionDate = DateTime.Now;
    }

    IEnumerable<Country> SelectedItems = Array.Empty<Country>();

    private async Task OnSearchAsync(OptionsSearchEventArgs<Country> e)
    {
        var allCountries = await Data.GetCountriesAsync();
        e.Items = allCountries.Where(i => i.Name.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase))
                              .OrderBy(i => i.Name);
    }

    [SupplyParameterFromForm]
    private Starship starship { get; set; } = new();

    private void HandleValidSubmit()
    {
        DemoLogger.WriteLine("HandleValidSubmit called");

        // Process the valid form
    }
}
