<p>
    <FluentNumberField @bind-Value="exampleInt">Integer</FluentNumberField>
    <br />
    Example int: @exampleInt
    <br />
    Minimum value: @(int.MinValue); Maximum value: @(int.MaxValue)
</p>
<p>
    <FluentNumberField @bind-Value="exampleNullableInt">Nullable integer</FluentNumberField>
    <br />
    Example nullable int: @exampleNullableInt
    <br />
    Minimum value: @(int.MinValue); Maximum value: @(int.MaxValue)
</p>
<p>
    Same as above but bound to oninput event 
    <br />
    <FluentNumberField @bind-Value="exampleInt2" Appearance="FluentInputAppearance.Filled" @oninput="@(e => Int32.TryParse(e.Value?.ToString(), out exampleInt2))">Integer</FluentNumberField>
    <br />
    Example int: @exampleInt2
</p>
<p>
    Nullable int bound to oninput event 
    <br />
    <FluentNumberField @bind-Value="exampleNullableInt2" Appearance="FluentInputAppearance.Filled" @oninput="@(e => exampleNullableInt2 = int.TryParse(e.Value?.ToString(), out int tmp) ? (int?)tmp : null)">Nullable integer</FluentNumberField>
    <br />
    Example nullable int: @exampleNullableInt2
</p>

@code {
    int exampleInt { get; set; } = 123;
    private int? exampleNullableInt = null;
    private int exampleInt2 = 345;
    private int? exampleNullableInt2 = null;
}
