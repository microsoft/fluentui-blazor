@page "/DesignTheme"
@using FluentUI.Demo.Shared.Pages.Design.Examples

<h1>Theming</h1>

<p>
    The theme provider specifies all the colors, shapes, sizes and shadows for your layout.
</p>
<p>
    <strong>FluentDesignTheme</strong> lets you quickly manage the main color and mode (dark/light)
    of your <strong>entire</strong> application. <br />
    If you'd like to customize all the details of your application, or just part of it, please use
    the <a href="/DesignTokens">DesignTokens</a>
</p>

<h2 id="DesignTheme">FluentDesignTheme</h2>

<p>
    <strong>FluentDesignTheme</strong> is both a Blazor component but also available in HTML to allow theme configuration,
    before Blazor components are rendered to avoid a "sparkling/flash" effect at page startup.
    Particularly when using a WebAssembly project, which may require more time to load the Assemblies needed to run the application.

    <br />
    <br />
    <b>Example in HTML</b><br />
    <CodeSnippet Language="xml">
        @(
@"<fluent-design-theme mode=""dark"" primary-color=""word"" />
<fluent-design-theme mode=""light"" primary-color=""#ff0000"" />")"</CodeSnippet>

    <b>Example in Blazor</b><br />
    <CodeSnippet Language="xml">
        @(
@"<FluentDesignTheme Mode=""DesignThemeModes.Dark"" OfficeColor=""OfficeColor.Word"" />
<FluentDesignTheme Mode=""DesignThemeModes.Light"" CustomColor=""#ff0000"" />")")"</CodeSnippet>
</p>

<h3>Mode</h3>

<p>
    For the Blazor <b>FluentDesignTheme</b> component, you can define the <b>mode</b> of your application.
    <ul>
        <li><b>System</b>: respects the browser's appearance.</li>
        <li><b>Dark</b>: forces the appearance in Dark theme.</li>
        <li><b>Light</b>: forces the appearance in Light theme.</li>
    </ul>
</p>

<h3>OnLuminanceChanged</h3>

<p>
    When the theme is updated, the <b>OnLuminanceChanged</b> event is triggered.
    <FluentDataGrid Items="@ModeCombinations" Style="border: 1px solid silver;">
        <PropertyColumn Property="@(p => p.FluentDesignTheme)" Title="FluentDesignTheme.Mode" />
        <PropertyColumn Property="@(p => p.Browser)" Title="Browser theme" />
        <PropertyColumn Property="@(p => p.OnLuminanceChanged)" Title="OnLuminanceChanged event" />
    </FluentDataGrid>

    @code
    {
        record ModeCombination(string FluentDesignTheme, string Browser, string OnLuminanceChanged);
        IQueryable<ModeCombination> ModeCombinations = new[]
        {
            new ModeCombination("System", "Light", "{ Mode: \"System\", IsDark: false }"),
            new ModeCombination("System", "Dark", "{ Mode: \"System\", IsDark: true}"),
            new ModeCombination("Light", "NA", "{ Mode: \"Light\", IsDark: false }"),
            new ModeCombination("Dark", "NA", "{ Mode: \"Dark\", IsDark: true }"),
        }.AsQueryable();
    }
</p>

<h3>LocalStorage</h3>

<p>
    The <b>FluentDesignTheme</b> component contains an optional <b>StorageName</b> attribute to
    define the name of the local storage to automatically save and retrieve the selected <b>Mode</b> and <b>PrimaryColor</b>.
</p>
<p>
    Don't set this property to allow you to set your application's theme manually.
    On the other hand, set a value (e.g. <i>theme</i>) to automatically let the component save the theme choice and retrieve it the next time the application is visited.
    <br /><br />
    Theme settings are saved in the browser's LocalStorage section.
    <CodeSnippet Language="json">@("\"theme\" = {\"mode\": \"light\", \"primaryColor\": \"word\"}")</CodeSnippet>
</p>

<h3>How to remove the "Sparkling Effect" on loading</h3>

<p>
    Depending on the size of the file to be downloaded or the user's bandwidth,
    there may be a "Sparkling Effect" effect when the page is loaded.
    (a white page displayed some milliseconds before the Dark theme is present).
    This is due to the fact that Blazor's complete engine cannot display a Dark page
    until the code (JS and WebAssembly) has been downloaded and executed.
</p>
<p>
    To avoid this, we propose a component separate from the main library,
    whose only purpose is to detect the dark/light mode to be displayed,
    until the main components are loaded.
</p>

<CodeSnippet Language="xml">
    @(
@"<script src=""_content/Microsoft.FluentUI.AspNetCore.Components/js/loading-theme.js"" type=""text/javascript""></script>
<loading-theme storage-name=""theme""></loading-theme>")"</CodeSnippet>

<p>
    In this example, the <strong>storage-name="theme"</strong> searches for a optional
    theme saved in the browser's LocalStorage. <br/>
    You can also "force" the Dark theme using a syntax like <code>&lt;loading-theme mode="dark" /&gt;</code>
</p>

<p>
    Technically, this <b>loading-theme</b> component adds a <b>hidden-body</b> class
    (<code>visibility: hidden; background-color: #272727;</code>) to the <b>body</b> tag during the loading time 
    of all FluentUI Blazor components.
    Once they are integrated into the browser, this class is removed and the content is displayed.
</p>

<h3>Example</h3>  

<DemoSection Title="" Component="@typeof(DesignThemeDefault)" />

<h2 id="DesignSystemProvider">FluentDesignSystemProvider</h2>

<DemoSection Title="" Component="@typeof(DesignTokenEmbeddedDefault)">
    <Description>
        This panel is customized using the <strong>FluentDesignSystemProvider</strong> component,
        where <b>AccentBaseColor</b> is red, <b>StrokeWidth</b> is 4 and <b>FillColor</b> is light gray.

        <p>
            See this <a href="/DesignTokens">"Design tokens" page</a> for more details.
        </p>
    </Description>
</DemoSection>

<h2 id="documentation">Documentation</h2>

<ApiDocumentation Component="typeof(FluentDesignTheme)" />

<br />
<br />

<ApiDocumentation Component="typeof(FluentDesignSystemProvider)" />