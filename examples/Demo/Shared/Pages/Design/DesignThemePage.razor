@page "/DesignTheme"
@using FluentUI.Demo.Shared.Pages.Design.Examples

<h1>Theming</h1>

<p>
    The theme provider specifies all the colors, shapes, sizes and shadows for your layout.
</p>
<p>
    <strong>FluentDesignTheme</strong> lets you quickly manage the main color and mode (dark/light)
    of your <strong>entire</strong> application. <br />
    If you'd like to customize all the details of your application, or just part of it, please use
    the <a href="/DesignTokens">DesignTokens</a>
</p>

<blockquote>
    &#9888; This <strong>FluentDesignTheme</strong> component can only be added once to your HTML code.
    As it manages the theme of the entire page, it avoids the effects of interaction between several elements.
</blockquote>

<h2 id="DesignTheme">FluentDesignTheme</h2>

<p>
    <strong>FluentDesignTheme</strong> is both a Blazor component but also available in HTML to allow theme configuration,
    before Blazor components are rendered to avoid a "sparkling/flash" effect at page startup.
    Particularly when using a WebAssembly project, which may require more time to load the Assemblies needed to run the application.

    <br />
    <br />
    <b>Example in HTML</b><br />
    <CodeSnippet Language="xml">
        @(
@"<fluent-design-theme mode=""dark"" primary-color=""word"" />
<fluent-design-theme mode=""light"" primary-color=""#ff0000"" />")"</CodeSnippet>

    <b>Example in Blazor</b><br />
    <CodeSnippet Language="xml">
        @(
@"<FluentDesignTheme Mode=""DesignThemeModes.Dark"" OfficeColor=""OfficeColor.Word"" />
<FluentDesignTheme Mode=""DesignThemeModes.Light"" CustomColor=""#ff0000"" />")")"</CodeSnippet>
</p>

<p>
    For the Blazor <b>FluentDesignTheme</b> component, you can define the <b>mode</b> of your application.
    <ul>
        <li><b>System</b>: respects the browser's appearance.</li>
        <li><b>Dark</b>: forces the appearance in Dark theme.</li>
        <li><b>Light</b>: forces the appearance in Light theme.</li>
    </ul>
    When the theme is updated, the <b>OnLuminanceChanged</b> event is triggered.
    <FluentDataGrid Items="@ModeCombinations" Style="border: 1px solid silver;">
        <PropertyColumn Property="@(p => p.FluentDesignTheme)" Title="FluentDesignTheme.Mode" />
        <PropertyColumn Property="@(p => p.Browser)" Title="Browser theme" />
        <PropertyColumn Property="@(p => p.OnLuminanceChanged)" Title="OnLuminanceChanged event" />
    </FluentDataGrid>

    @code
    {
        record ModeCombination(string FluentDesignTheme, string Browser, string OnLuminanceChanged);
        IQueryable<ModeCombination> ModeCombinations = new[]
        {
            new ModeCombination("System", "Light", "{ Mode: \"System\", IsDark: false }"),
            new ModeCombination("System", "Dark", "{ Mode: \"System\", IsDark: true}"),
            new ModeCombination("Light", "NA", "{ Mode: \"Light\", IsDark: false }"),
            new ModeCombination("Dark", "NA", "{ Mode: \"Dark\", IsDark: true }"),
        }.AsQueryable();
    }
</p>

<DemoSection Title="" Component="@typeof(DesignThemeDefault)" />

<h2 id="DesignSystemProvider">FluentDesignSystemProvider</h2>

<DemoSection Title="" Component="@typeof(DesignTokenEmbeddedDefault)">
    <Description>
        This panel is customized using the <strong>FluentDesignSystemProvider</strong> component,
        where <b>AccentBaseColor</b> is red, <b>StrokeWidth</b> is 4 and <b>FillColor</b> is light gray.

        <p>
            See this <a href="/DesignTokens">"Design tokens" page</a> for more details.
        </p>
    </Description>
</DemoSection>

<h2 id="documentation">Documentation</h2>

<ApiDocumentation Component="typeof(FluentDesignTheme)" />

<br />
<br />

<ApiDocumentation Component="typeof(FluentDesignSystemProvider)" />