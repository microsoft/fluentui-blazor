@inject IDialogService DialogService

<FluentButton Appearance="Appearance.Accent" OnClick="@EditAsync">Edit</FluentButton>



<FluentButton Appearance="Appearance.Accent" OnClick="@EditSafeAsync">Edit (type safe)</FluentButton>


<p>Name: @DialogData.Name - Age: @DialogData.Age</p>

@code
{
    string TestData = "Test Data";
    SimpleEditDialog.RegisterContent DialogData { get; set; } = new() { Id = 1, Name = "Denis", Age = 24 };

    private async Task EditAsync()
    {
        // Create a new instance of DialogData
        // to allow the user to cancel the update
        var data = DialogData with { Id = 0 } ?? new();

        var dialog = await DialogService.ShowDialogAsync<SimpleEditDialog>(data, new DialogParameters()
        {
            Height = "400px",
            Title = $"Updating the {DialogData.Name} sheet",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
        });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            DialogData = (SimpleEditDialog.RegisterContent)result.Data;
        }

    }

    private async Task EditSafeAsync()
    {
        // When replacing the line below with the commented one, the code will not compile
        //var dialog = await DialogService.ShowAsync(DialogHelper.From<SimpleEditDialog>() ,TestData, new DialogParameters()
        var dialog = await DialogService.ShowDialogAsync(DialogHelper.From<SimpleEditDialog>(), DialogData, new DialogParameters()
        {
            Height = "400px",
            Title = $"Updating the {DialogData.Name} sheet",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
        });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            DialogData = (SimpleEditDialog.RegisterContent)result.Data;
        }
    }
}
