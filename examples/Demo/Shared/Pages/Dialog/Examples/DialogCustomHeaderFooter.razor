@inject IDialogService DialogService


<div style="margin-top: 1rem;">
    <FluentButton @onclick="@OpenDialogAsync" Appearance="Appearance.Accent">
        Open Dialog
    </FluentButton>
</div>

@code {
    private bool _trapFocus = true;
    private bool _modal = true;
    private IDialogReference dialog;

    SimplePerson simplePerson = new()
        {
            Firstname = "Dan",
            Lastname = "Sanderson",
            Age = 42,
        };

    private async Task OpenDialogAsync()
    {
        DemoLogger.WriteLine($"Open dialog left");

        DialogParameters<SimplePerson> parameters = new()
            {
                HeaderTemplate = new RenderFragment(builder =>
                {
                    builder.OpenComponent<CustomHeader>(0);
                    builder.AddAttribute(1, "Title", $"Hello {simplePerson.Firstname}");
                    builder.AddAttribute(2, "ShowDismiss", true);
                    builder.CloseComponent();
                }),
                FooterTemplate = new RenderFragment(builder =>
                {
                    builder.OpenComponent<CustomFooter>(0);
                    builder.AddAttribute(1, "PrimaryAction", "Save");
                    builder.AddAttribute(2, "SecondaryAction", "Cancel");
                    builder.AddAttribute(3, "TertiaryAction", "Don't know yet");
                    builder.AddAttribute(4, "OnTertiaryAction", EventCallback.Factory.Create(this, HandleMe));
                    builder.CloseComponent();
                }),
                Alignment = HorizontalAlignment.Left,
                Width = "500px",
                Height = "500px",
                Content = simplePerson,
                TrapFocus = _trapFocus,
                Modal = _modal,
            };

        dialog = await DialogService.ShowDialogAsync<SimpleFormInDialog, SimplePerson>(parameters);
        DialogResult? result = await dialog.Result;


        if (result.Data is not null)
        {
            SimplePerson? simplePerson = result.Data as SimplePerson;
            DemoLogger.WriteLine($"Dialog closed by {simplePerson?.Firstname} {simplePerson?.Lastname} ({simplePerson?.Age}) - Canceled: {result.Cancelled}");
        }
        else
        {
            DemoLogger.WriteLine($"Dialog closed - Canceled: {result.Cancelled}");
        }

    }
    private void HandleMe()
    {
        DemoLogger.WriteLine($"Tertiary action clicked");
        dialog.CloseAsync();
    }
}