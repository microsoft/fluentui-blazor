// ------------------------------------------------------------------------
// MIT License - Copyright (c) Microsoft Corporation. All rights reserved.
// ------------------------------------------------------------------------

namespace FluentUI.Demo.SampleData.Resources;

/// <summary>
/// Read the embedded resources.
/// Face pictures are stored as embedded resources.
/// They were generated by AI from the https://thispersondoesnotexist.com (Creative Commons BY-NC 4.0 license, allowing non-commercial use with proper attribution).
/// </summary>
internal static class ResourceReader
{
    private const string ResourceNamespace = "FluentUI.Demo.SampleData.Resources";

    /// <summary>
    /// Read the embedded picture
    /// </summary>
    /// <param name="filename"></param>
    /// <returns></returns>
    /// <exception cref="FileNotFoundException"></exception>
    public static byte[] EmbeddedPicture(string filename)
    {
        using var stream = GetStream(filename);
        var buffer = new byte[stream.Length];
        var bytesRead = 0;
        var totalBytesRead = 0;

        while ((bytesRead = stream.Read(buffer, totalBytesRead, buffer.Length - totalBytesRead)) > 0)
        {
            totalBytesRead += bytesRead;
        }

        return buffer;
    }

    /// <summary>
    /// Convert the byte array to a base64 string
    /// </summary>
    public static string ToBase64(this byte[] data)
    {
        return Convert.ToBase64String(data);
    }

    /// <summary>
    /// Read the embedded text file
    /// </summary>
    /// <param name="filename"></param>
    /// <returns></returns>
    /// <exception cref="FileNotFoundException"></exception>
    public static string EmbeddedText(string filename)
    {
        using var stream = GetStream(filename);
        using (var reader = new StreamReader(stream))
        {
            return reader.ReadToEnd();
        }
    }

    /// <summary>
    /// Read the embedded content.
    /// </summary>
    /// <param name="filename"></param>
    /// <returns></returns>
    /// <exception cref="FileNotFoundException"></exception>
    private static Stream GetStream(string filename)
    {
        var resourceName = $"{ResourceNamespace}.{filename}";
        var assembly = typeof(People).Assembly;
        var stream = assembly.GetManifestResourceStream(resourceName);

        if (stream == null)
        {
            throw new FileNotFoundException($"Resource {resourceName} not found in {assembly.FullName}");
        }

        return stream;
    }
}
